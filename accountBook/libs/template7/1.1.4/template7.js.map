{"version":3,"sources":["template7.js"],"names":[],"mappingsfile":"template7.js","sourcesContent":["window.Template7 = (function () {\n    'use strict';\n    function isArray(arr) {\n        return Object.prototype.toString.apply(arr) === '[object Array]';\n    }\n    function isObject(obj) {\n        return obj instanceof Object;\n    }\n    function isFunction(func) {\n        return typeof func === 'function';\n    }\n    function _escape(string) {\n        return typeof window !== 'undefined' && window.escape ? window.escape(string) : string\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;');\n    }\n    var cache = {};\n    var quoteSingleRexExp = new RegExp('\\'', 'g');\n    var quoteDoubleRexExp = new RegExp('\"', 'g');\n    function helperToSlices(string) {\n        var helperParts = string.replace(/[{}#}]/g, '').split(' ');\n        var slices = [];\n        var shiftIndex, i, j;\n        for (i = 0; i < helperParts.length; i++) {\n            var part = helperParts[i];\n            var blockQuoteRegExp, openingQuote;\n            if (i === 0) slices.push(part);\n            else {\n                if (part.indexOf('\"') === 0 || part.indexOf('\\'') === 0) {\n                    blockQuoteRegExp = part.indexOf('\"') === 0 ? quoteDoubleRexExp : quoteSingleRexExp;\n                    openingQuote = part.indexOf('\"') === 0 ? '\"' : '\\'';\n                    // Plain String\n                    if (part.match(blockQuoteRegExp).length === 2) {\n                        // One word string\n                        slices.push(part);\n                    }\n                    else {\n                        // Find closed Index\n                        shiftIndex = 0;\n                        for (j = i + 1; j < helperParts.length; j++) {\n                            part += ' ' + helperParts[j];\n                            if (helperParts[j].indexOf(openingQuote) >= 0) {\n                                shiftIndex = j;\n                                slices.push(part);\n                                break;\n                            }\n                        }\n                        if (shiftIndex) i = shiftIndex;\n                    }\n                }\n                else {\n                    if (part.indexOf('=') > 0) {\n                        // Hash\n                        var hashParts = part.split('=');\n                        var hashName = hashParts[0];\n                        var hashContent = hashParts[1];\n                        if (!blockQuoteRegExp) {\n                            blockQuoteRegExp = hashContent.indexOf('\"') === 0 ? quoteDoubleRexExp : quoteSingleRexExp;\n                            openingQuote = hashContent.indexOf('\"') === 0 ? '\"' : '\\'';\n                        }\n                        if (hashContent.match(blockQuoteRegExp).length !== 2) {\n                            shiftIndex = 0;\n                            for (j = i + 1; j < helperParts.length; j++) {\n                                hashContent += ' ' + helperParts[j];\n                                if (helperParts[j].indexOf(openingQuote) >= 0) {\n                                    shiftIndex = j;\n                                    break;\n                                }\n                            }\n                            if (shiftIndex) i = shiftIndex;\n                        }\n                        var hash = [hashName, hashContent.replace(blockQuoteRegExp,'')];\n                        slices.push(hash);\n                    }\n                    else {\n                        // Plain variable\n                        slices.push(part);\n                    }\n                }\n            }\n        }\n        return slices;\n    }\n    function stringToBlocks(string) {\n        var blocks = [], i, j, k;\n        if (!string) return [];\n        var _blocks = string.split(/({{[^{^}]*}})/);\n        for (i = 0; i < _blocks.length; i++) {\n            var block = _blocks[i];\n            if (block === '') continue;\n            if (block.indexOf('{{') < 0) {\n                blocks.push({\n                    type: 'plain',\n                    content: block\n                });\n            }\n            else {\n                if (block.indexOf('{/') >= 0) {\n                    continue;\n                }\n                if (block.indexOf('{#') < 0 && block.indexOf(' ') < 0 && block.indexOf('else') < 0) {\n                    // Simple variable\n                    blocks.push({\n                        type: 'variable',\n                        contextName: block.replace(/[{}]/g, '')\n                    });\n                    continue;\n                }\n                // Helpers\n                var helperSlices = helperToSlices(block);\n                var helperName = helperSlices[0];\n                var isPartial = helperName === '>';\n                var helperContext = [];\n                var helperHash = {};\n                for (j = 1; j < helperSlices.length; j++) {\n                    var slice = helperSlices[j];\n                    if (isArray(slice)) {\n                        // Hash\n                        helperHash[slice[0]] = slice[1] === 'false' ? false : slice[1];\n                    }\n                    else {\n                        helperContext.push(slice);\n                    }\n                }\n\n                if (block.indexOf('{#') >= 0) {\n                    // Condition/Helper\n                    var helperStartIndex = i;\n                    var helperContent = '';\n                    var elseContent = '';\n                    var toSkip = 0;\n                    var shiftIndex;\n                    var foundClosed = false, foundElse = false, foundClosedElse = false, depth = 0;\n                    for (j = i + 1; j < _blocks.length; j++) {\n                        if (_blocks[j].indexOf('{{#') >= 0) {\n                            depth ++;\n                        }\n                        if (_blocks[j].indexOf('{{/') >= 0) {\n                            depth --;\n                        }\n                        if (_blocks[j].indexOf('{{#' + helperName) >= 0) {\n                            helperContent += _blocks[j];\n                            if (foundElse) elseContent += _blocks[j];\n                            toSkip ++;\n                        }\n                        else if (_blocks[j].indexOf('{{/' + helperName) >= 0) {\n                            if (toSkip > 0) {\n                                toSkip--;\n                                helperContent += _blocks[j];\n                                if (foundElse) elseContent += _blocks[j];\n                            }\n                            else {\n                                shiftIndex = j;\n                                foundClosed = true;\n                                break;\n                            }\n                        }\n                        else if (_blocks[j].indexOf('else') >= 0 && depth === 0) {\n                            foundElse = true;\n                        }\n                        else {\n                            if (!foundElse) helperContent += _blocks[j];\n                            if (foundElse) elseContent += _blocks[j];\n                        }\n\n                    }\n                    if (foundClosed) {\n                        if (shiftIndex) i = shiftIndex;\n                        blocks.push({\n                            type: 'helper',\n                            helperName: helperName,\n                            contextName: helperContext,\n                            content: helperContent,\n                            inverseContent: elseContent,\n                            hash: helperHash\n                        });\n                    }\n                }\n                else if (block.indexOf(' ') > 0) {\n                    if (isPartial) {\n                        helperName = '_partial';\n                        if (helperContext[0]) helperContext[0] = '\"' + helperContext[0].replace(/\"|'/g, '') + '\"';\n                    }\n                    blocks.push({\n                        type: 'helper',\n                        helperName: helperName,\n                        contextName: helperContext,\n                        hash: helperHash\n                    });\n                }\n            }\n        }\n        return blocks;\n    }\n    var Template7 = function (template, options) {\n        var t = this;\n        t.template = template;\n\n        function getCompileFn(block, depth) {\n            if (block.content) return compile(block.content, depth);\n            else return function () {return ''; };\n        }\n        function getCompileInverse(block, depth) {\n            if (block.inverseContent) return compile(block.inverseContent, depth);\n            else return function () {return ''; };\n        }\n        function getCompileVar(name, ctx) {\n            var variable, parts, levelsUp = 0, initialCtx = ctx;\n            if (name.indexOf('../') === 0) {\n                levelsUp = name.split('../').length - 1;\n                var newDepth = ctx.split('_')[1] - levelsUp;\n                ctx = 'ctx_' + (newDepth >= 1 ? newDepth : 1);\n                parts = name.split('../')[levelsUp].split('.');\n            }\n            else if (name.indexOf('@global') === 0) {\n                ctx = 'Template7.global';\n                parts = name.split('@global.')[1].split('.');\n            }\n            else if (name.indexOf('@root') === 0) {\n                ctx = 'root';\n                parts = name.split('@root.')[1].split('.');\n            }\n            else {\n                parts = name.split('.');\n            }\n            variable = ctx;\n            for (var i = 0; i < parts.length; i++) {\n                var part = parts[i];\n                if (part.indexOf('@') === 0) {\n                    if (i > 0) {\n                        variable += '[(data && data.' + part.replace('@', '') + ')]';\n                    }\n                    else {\n                        variable = '(data && data.' + name.replace('@', '') + ')';\n                    }\n                }\n                else {\n                    if (isFinite(part)) {\n                        variable += '[' + part + ']';\n                    }\n                    else {\n                        if (part === 'this' || part.indexOf('this.') >= 0 || part.indexOf('this[') >= 0 || part.indexOf('this(') >= 0) {\n                            variable = part.replace('this', ctx);\n                        }\n                        else {\n                            variable += '.' + part;\n                        }\n                    }\n                }\n            }\n\n            return variable;\n        }\n        function getCompiledArguments(contextArray, ctx) {\n            var arr = [];\n            for (var i = 0; i < contextArray.length; i++) {\n                if (/^['\"]/.test(contextArray[i])) arr.push(contextArray[i]);\n                else if (/^(true|false|\\d+)$/.test(contextArray[i])) arr.push(contextArray[i]);\n                else {\n                    arr.push(getCompileVar(contextArray[i], ctx));\n                }\n            }\n\n            return arr.join(', ');\n        }\n        function compile(template, depth) {\n            depth = depth || 1;\n            template = template || t.template;\n            if (typeof template !== 'string') {\n                throw new Error('Template7: Template must be a string');\n            }\n            var blocks = stringToBlocks(template);\n            if (blocks.length === 0) {\n                return function () { return ''; };\n            }\n            var ctx = 'ctx_' + depth;\n            var resultString = '';\n            if (depth === 1) {\n                resultString += '(function (' + ctx + ', data, root) {\\n';\n            }\n            else {\n                resultString += '(function (' + ctx + ', data) {\\n';\n            }\n            if (depth === 1) {\n                resultString += 'function isArray(arr){return Object.prototype.toString.apply(arr) === \\'[object Array]\\';}\\n';\n                resultString += 'function isFunction(func){return (typeof func === \\'function\\');}\\n';\n                resultString += 'function c(val, ctx) {if (typeof val !== \"undefined\" && val !== null) {if (isFunction(val)) {return val.call(ctx);} else return val;} else return \"\";}\\n';\n                resultString += 'root = root || ctx_1 || {};\\n';\n            }\n            resultString += 'var r = \\'\\';\\n';\n            var i, j, context;\n            for (i = 0; i < blocks.length; i++) {\n                var block = blocks[i];\n                // Plain block\n                if (block.type === 'plain') {\n                    resultString += 'r +=\\'' + (block.content).replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/'/g, '\\\\' + '\\'') + '\\';';\n                    continue;\n                }\n                var variable, compiledArguments;\n                // Variable block\n                if (block.type === 'variable') {\n                    variable = getCompileVar(block.contextName, ctx);\n                    resultString += 'r += c(' + variable + ', ' + ctx + ');';\n                }\n                // Helpers block\n                if (block.type === 'helper') {\n                    if (block.helperName in t.helpers) {\n                        compiledArguments = getCompiledArguments(block.contextName, ctx);\n\n                        resultString += 'r += (Template7.helpers.' + block.helperName + ').call(' + ctx + ', ' + (compiledArguments && (compiledArguments + ', ')) +'{hash:' + JSON.stringify(block.hash) + ', data: data || {}, fn: ' + getCompileFn(block, depth + 1) + ', inverse: ' + getCompileInverse(block, depth + 1) + ', root: root});';\n\n                    }\n                    else {\n                        if (block.contextName.length > 0) {\n                            throw new Error('Template7: Missing helper: \"' + block.helperName + '\"');\n                        }\n                        else {\n                            variable = getCompileVar(block.helperName, ctx);\n                            resultString += 'if (' + variable + ') {';\n                            resultString += 'if (isArray(' + variable + ')) {';\n                            resultString += 'r += (Template7.helpers.each).call(' + ctx + ', ' + variable + ', {hash:' + JSON.stringify(block.hash) + ', data: data || {}, fn: ' + getCompileFn(block, depth+1) + ', inverse: ' + getCompileInverse(block, depth+1) + ', root: root});';\n                            resultString += '}else {';\n                            resultString += 'r += (Template7.helpers.with).call(' + ctx + ', ' + variable + ', {hash:' + JSON.stringify(block.hash) + ', data: data || {}, fn: ' + getCompileFn(block, depth+1) + ', inverse: ' + getCompileInverse(block, depth+1) + ', root: root});';\n                            resultString += '}}';\n                        }\n                    }\n                }\n            }\n            resultString += '\\nreturn r;})';\n            return eval.call(window, resultString);\n        }\n        t.compile = function (template) {\n            if (!t.compiled) {\n                t.compiled = compile(template);\n            }\n            return t.compiled;\n        };\n    };\n    Template7.prototype = {\n        options: {},\n        partials: {},\n        helpers: {\n            '_partial' : function (partialName, options) {\n                var p = Template7.prototype.partials[partialName];\n                if (!p || (p && !p.template)) return '';\n                if (!p.compiled) {\n                    p.compiled = new Template7(p.template).compile();\n                }\n                var ctx = this;\n                for (var hashName in options.hash) {\n                    ctx[hashName] = options.hash[hashName];\n                }\n                return p.compiled(ctx, options.data, options.root);\n            },\n            'escape': function (context, options) {\n                if (typeof context !== 'string') {\n                    throw new Error('Template7: Passed context to \"escape\" helper should be a string');\n                }\n                return _escape(context);\n            },\n            'if': function (context, options) {\n                if (isFunction(context)) { context = context.call(this); }\n                if (context) {\n                    return options.fn(this, options.data);\n                }\n                else {\n                    return options.inverse(this, options.data);\n                }\n            },\n            'unless': function (context, options) {\n                if (isFunction(context)) { context = context.call(this); }\n                if (!context) {\n                    return options.fn(this, options.data);\n                }\n                else {\n                    return options.inverse(this, options.data);\n                }\n            },\n            'each': function (context, options) {\n                var ret = '', i = 0;\n                if (isFunction(context)) { context = context.call(this); }\n                if (isArray(context)) {\n                    if (options.hash.reverse) {\n                        context = context.reverse();\n                    }\n                    for (i = 0; i < context.length; i++) {\n                        ret += options.fn(context[i], {first: i === 0, last: i === context.length - 1, index: i});\n                    }\n                    if (options.hash.reverse) {\n                        context = context.reverse();\n                    }\n                }\n                else {\n                    for (var key in context) {\n                        i++;\n                        ret += options.fn(context[key], {key: key});\n                    }\n                }\n                if (i > 0) return ret;\n                else return options.inverse(this);\n            },\n            'with': function (context, options) {\n                if (isFunction(context)) { context = context.call(this); }\n                return options.fn(context);\n            },\n            'join': function (context, options) {\n                if (isFunction(context)) { context = context.call(this); }\n                return context.join(options.hash.delimiter || options.hash.delimeter);\n            },\n            'js': function (expression, options) {\n                var func;\n                if (expression.indexOf('return')>=0) {\n                    func = '(function(){'+expression+'})';\n                }\n                else {\n                    func = '(function(){return ('+expression+')})';\n                }\n                return eval.call(this, func).call(this);\n            },\n            'js_compare': function (expression, options) {\n                var func;\n                if (expression.indexOf('return')>=0) {\n                    func = '(function(){'+expression+'})';\n                }\n                else {\n                    func = '(function(){return ('+expression+')})';\n                }\n                var condition = eval.call(this, func).call(this);\n                if (condition) {\n                    return options.fn(this, options.data);\n                }\n                else {\n                    return options.inverse(this, options.data);\n                }\n            }\n        }\n    };\n    var t7 = function (template, data) {\n        if (arguments.length === 2) {\n            var instance = new Template7(template);\n            var rendered = instance.compile()(data);\n            instance = null;\n            return (rendered);\n        }\n        else return new Template7(template);\n    };\n    t7.registerHelper = function (name, fn) {\n        Template7.prototype.helpers[name] = fn;\n    };\n    t7.unregisterHelper = function (name) {\n        Template7.prototype.helpers[name] = undefined;\n        delete Template7.prototype.helpers[name];\n    };\n    t7.registerPartial = function (name, template) {\n        Template7.prototype.partials[name] = {template: template};\n    };\n    t7.unregisterPartial = function (name, template) {\n        if (Template7.prototype.partials[name]) {\n            Template7.prototype.partials[name] = undefined;\n            delete Template7.prototype.partials[name];\n        }\n    };\n    t7.compile = function (template, options) {\n        var instance = new Template7(template, options);\n        return instance.compile();\n    };\n\n    t7.options = Template7.prototype.options;\n    t7.helpers = Template7.prototype.helpers;\n    t7.partials = Template7.prototype.partials;\n    return t7;\n})();"],"sourceRoot":"/source/"}
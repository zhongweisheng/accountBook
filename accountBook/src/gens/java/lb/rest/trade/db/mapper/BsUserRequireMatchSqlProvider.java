package lb.rest.trade.db.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import java.util.List;
import java.util.Map;
import lb.rest.trade.db.entity.BsUserRequireMatch;
import lb.rest.trade.db.entity.BsUserRequireMatchExample.Criteria;
import lb.rest.trade.db.entity.BsUserRequireMatchExample.Criterion;
import lb.rest.trade.db.entity.BsUserRequireMatchExample;

public class BsUserRequireMatchSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require_match
     *
     * @mbggenerated Thu Feb 16 18:05:52 CST 2017
     */
    public String countByExample(BsUserRequireMatchExample example) {
        BEGIN();
        SELECT("count(*)");
        FROM("bs_user_require_match");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require_match
     *
     * @mbggenerated Thu Feb 16 18:05:52 CST 2017
     */
    public String deleteByExample(BsUserRequireMatchExample example) {
        BEGIN();
        DELETE_FROM("bs_user_require_match");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require_match
     *
     * @mbggenerated Thu Feb 16 18:05:52 CST 2017
     */
    public String insertSelective(BsUserRequireMatch record) {
        BEGIN();
        INSERT_INTO("bs_user_require_match");
        
        if (record.getId() != null) {
            VALUES("id", "#{id,jdbcType=BIGINT}");
        }
        
        if (record.getProcessStatus() != null) {
            VALUES("process_status", "#{processStatus,jdbcType=INTEGER}");
        }
        
        if (record.getRequireId() != null) {
            VALUES("require_id", "#{requireId,jdbcType=BIGINT}");
        }
        
        if (record.getMatchGoodsId() != null) {
            VALUES("match_goods_id", "#{matchGoodsId,jdbcType=INTEGER}");
        }
        
        if (record.getRealityBuyPriceType() != null) {
            VALUES("reality_buy_price_type", "#{realityBuyPriceType,jdbcType=INTEGER}");
        }
        
        if (record.getRealitySellPriceType() != null) {
            VALUES("reality_sell_price_type", "#{realitySellPriceType,jdbcType=INTEGER}");
        }
        
        if (record.getRealityBuyPrice() != null) {
            VALUES("reality_buy_price", "#{realityBuyPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getRealitySellPrice() != null) {
            VALUES("reality_sell_price", "#{realitySellPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getRealityBuyPayMethod() != null) {
            VALUES("reality_buy_pay_method", "#{realityBuyPayMethod,jdbcType=INTEGER}");
        }
        
        if (record.getRealitySellPayMethod() != null) {
            VALUES("reality_sell_pay_method", "#{realitySellPayMethod,jdbcType=INTEGER}");
        }
        
        if (record.getRealityBuyRequire() != null) {
            VALUES("reality_buy_require", "#{realityBuyRequire,jdbcType=VARCHAR}");
        }
        
        if (record.getRealitySellRequire() != null) {
            VALUES("reality_sell_require", "#{realitySellRequire,jdbcType=VARCHAR}");
        }
        
        if (record.getRealityLogisticsInfo() != null) {
            VALUES("reality_logistics_info", "#{realityLogisticsInfo,jdbcType=VARCHAR}");
        }
        
        if (record.getAbandonReasonCode() != null) {
            VALUES("abandon_reason_code", "#{abandonReasonCode,jdbcType=INTEGER}");
        }
        
        if (record.getAbandonReason() != null) {
            VALUES("abandon_reason", "#{abandonReason,jdbcType=VARCHAR}");
        }
        
        if (record.getModifyTime() != null) {
            VALUES("modify_time", "#{modifyTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCompleteTime() != null) {
            VALUES("complete_time", "#{completeTime,jdbcType=TIMESTAMP}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require_match
     *
     * @mbggenerated Thu Feb 16 18:05:52 CST 2017
     */
    public String selectByExample(BsUserRequireMatchExample example) {
        BEGIN();
        if (example != null && example.isDistinct()) {
            SELECT_DISTINCT("id");
        } else {
            SELECT("id");
        }
        SELECT("process_status");
        SELECT("require_id");
        SELECT("match_goods_id");
        SELECT("reality_buy_price_type");
        SELECT("reality_sell_price_type");
        SELECT("reality_buy_price");
        SELECT("reality_sell_price");
        SELECT("reality_buy_pay_method");
        SELECT("reality_sell_pay_method");
        SELECT("reality_buy_require");
        SELECT("reality_sell_require");
        SELECT("reality_logistics_info");
        SELECT("abandon_reason_code");
        SELECT("abandon_reason");
        SELECT("modify_time");
        SELECT("complete_time");
        FROM("bs_user_require_match");
        applyWhere(example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            ORDER_BY(example.getOrderByClause());
        }
        
        if(example != null){
            return SQL().concat(" limit "+example.getOffset()+","+example.getLimit());
        }
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require_match
     *
     * @mbggenerated Thu Feb 16 18:05:52 CST 2017
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        BsUserRequireMatch record = (BsUserRequireMatch) parameter.get("record");
        BsUserRequireMatchExample example = (BsUserRequireMatchExample) parameter.get("example");
        
        BEGIN();
        UPDATE("bs_user_require_match");
        
        if (record.getId() != null) {
            SET("id = #{record.id,jdbcType=BIGINT}");
        }
        
        if (record.getProcessStatus() != null) {
            SET("process_status = #{record.processStatus,jdbcType=INTEGER}");
        }
        
        if (record.getRequireId() != null) {
            SET("require_id = #{record.requireId,jdbcType=BIGINT}");
        }
        
        if (record.getMatchGoodsId() != null) {
            SET("match_goods_id = #{record.matchGoodsId,jdbcType=INTEGER}");
        }
        
        if (record.getRealityBuyPriceType() != null) {
            SET("reality_buy_price_type = #{record.realityBuyPriceType,jdbcType=INTEGER}");
        }
        
        if (record.getRealitySellPriceType() != null) {
            SET("reality_sell_price_type = #{record.realitySellPriceType,jdbcType=INTEGER}");
        }
        
        if (record.getRealityBuyPrice() != null) {
            SET("reality_buy_price = #{record.realityBuyPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getRealitySellPrice() != null) {
            SET("reality_sell_price = #{record.realitySellPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getRealityBuyPayMethod() != null) {
            SET("reality_buy_pay_method = #{record.realityBuyPayMethod,jdbcType=INTEGER}");
        }
        
        if (record.getRealitySellPayMethod() != null) {
            SET("reality_sell_pay_method = #{record.realitySellPayMethod,jdbcType=INTEGER}");
        }
        
        if (record.getRealityBuyRequire() != null) {
            SET("reality_buy_require = #{record.realityBuyRequire,jdbcType=VARCHAR}");
        }
        
        if (record.getRealitySellRequire() != null) {
            SET("reality_sell_require = #{record.realitySellRequire,jdbcType=VARCHAR}");
        }
        
        if (record.getRealityLogisticsInfo() != null) {
            SET("reality_logistics_info = #{record.realityLogisticsInfo,jdbcType=VARCHAR}");
        }
        
        if (record.getAbandonReasonCode() != null) {
            SET("abandon_reason_code = #{record.abandonReasonCode,jdbcType=INTEGER}");
        }
        
        if (record.getAbandonReason() != null) {
            SET("abandon_reason = #{record.abandonReason,jdbcType=VARCHAR}");
        }
        
        if (record.getModifyTime() != null) {
            SET("modify_time = #{record.modifyTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCompleteTime() != null) {
            SET("complete_time = #{record.completeTime,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require_match
     *
     * @mbggenerated Thu Feb 16 18:05:52 CST 2017
     */
    public String updateByExample(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("bs_user_require_match");
        
        SET("id = #{record.id,jdbcType=BIGINT}");
        SET("process_status = #{record.processStatus,jdbcType=INTEGER}");
        SET("require_id = #{record.requireId,jdbcType=BIGINT}");
        SET("match_goods_id = #{record.matchGoodsId,jdbcType=INTEGER}");
        SET("reality_buy_price_type = #{record.realityBuyPriceType,jdbcType=INTEGER}");
        SET("reality_sell_price_type = #{record.realitySellPriceType,jdbcType=INTEGER}");
        SET("reality_buy_price = #{record.realityBuyPrice,jdbcType=DOUBLE}");
        SET("reality_sell_price = #{record.realitySellPrice,jdbcType=DOUBLE}");
        SET("reality_buy_pay_method = #{record.realityBuyPayMethod,jdbcType=INTEGER}");
        SET("reality_sell_pay_method = #{record.realitySellPayMethod,jdbcType=INTEGER}");
        SET("reality_buy_require = #{record.realityBuyRequire,jdbcType=VARCHAR}");
        SET("reality_sell_require = #{record.realitySellRequire,jdbcType=VARCHAR}");
        SET("reality_logistics_info = #{record.realityLogisticsInfo,jdbcType=VARCHAR}");
        SET("abandon_reason_code = #{record.abandonReasonCode,jdbcType=INTEGER}");
        SET("abandon_reason = #{record.abandonReason,jdbcType=VARCHAR}");
        SET("modify_time = #{record.modifyTime,jdbcType=TIMESTAMP}");
        SET("complete_time = #{record.completeTime,jdbcType=TIMESTAMP}");
        
        BsUserRequireMatchExample example = (BsUserRequireMatchExample) parameter.get("example");
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require_match
     *
     * @mbggenerated Thu Feb 16 18:05:52 CST 2017
     */
    public String updateByPrimaryKeySelective(BsUserRequireMatch record) {
        BEGIN();
        UPDATE("bs_user_require_match");
        
        if (record.getProcessStatus() != null) {
            SET("process_status = #{processStatus,jdbcType=INTEGER}");
        }
        
        if (record.getRequireId() != null) {
            SET("require_id = #{requireId,jdbcType=BIGINT}");
        }
        
        if (record.getMatchGoodsId() != null) {
            SET("match_goods_id = #{matchGoodsId,jdbcType=INTEGER}");
        }
        
        if (record.getRealityBuyPriceType() != null) {
            SET("reality_buy_price_type = #{realityBuyPriceType,jdbcType=INTEGER}");
        }
        
        if (record.getRealitySellPriceType() != null) {
            SET("reality_sell_price_type = #{realitySellPriceType,jdbcType=INTEGER}");
        }
        
        if (record.getRealityBuyPrice() != null) {
            SET("reality_buy_price = #{realityBuyPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getRealitySellPrice() != null) {
            SET("reality_sell_price = #{realitySellPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getRealityBuyPayMethod() != null) {
            SET("reality_buy_pay_method = #{realityBuyPayMethod,jdbcType=INTEGER}");
        }
        
        if (record.getRealitySellPayMethod() != null) {
            SET("reality_sell_pay_method = #{realitySellPayMethod,jdbcType=INTEGER}");
        }
        
        if (record.getRealityBuyRequire() != null) {
            SET("reality_buy_require = #{realityBuyRequire,jdbcType=VARCHAR}");
        }
        
        if (record.getRealitySellRequire() != null) {
            SET("reality_sell_require = #{realitySellRequire,jdbcType=VARCHAR}");
        }
        
        if (record.getRealityLogisticsInfo() != null) {
            SET("reality_logistics_info = #{realityLogisticsInfo,jdbcType=VARCHAR}");
        }
        
        if (record.getAbandonReasonCode() != null) {
            SET("abandon_reason_code = #{abandonReasonCode,jdbcType=INTEGER}");
        }
        
        if (record.getAbandonReason() != null) {
            SET("abandon_reason = #{abandonReason,jdbcType=VARCHAR}");
        }
        
        if (record.getModifyTime() != null) {
            SET("modify_time = #{modifyTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCompleteTime() != null) {
            SET("complete_time = #{completeTime,jdbcType=TIMESTAMP}");
        }
        
        WHERE("id = #{id,jdbcType=BIGINT}");
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require_match
     *
     * @mbggenerated Thu Feb 16 18:05:52 CST 2017
     */
    protected void applyWhere(BsUserRequireMatchExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}
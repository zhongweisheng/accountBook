package lb.rest.trade.db.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import java.util.List;
import java.util.Map;

import lb.rest.trade.db.entity.BsGoodsInfo;
import lb.rest.trade.db.entity.BsGoodsInfoExample;
import lb.rest.trade.db.entity.BsGoodsInfoExample.Criteria;
import lb.rest.trade.db.entity.BsGoodsInfoExample.Criterion;

public class BsGoodsInfoSqlProvider {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table bs_goods_info
	 *
	 * @mbggenerated Fri Feb 24 18:06:23 CST 2017
	 */
	public String countByExample(BsGoodsInfoExample example) {
		BEGIN();
		SELECT("count(*)");
		FROM("bs_goods_info");
		applyWhere(example, false);
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table bs_goods_info
	 *
	 * @mbggenerated Fri Feb 24 18:06:23 CST 2017
	 */
	public String deleteByExample(BsGoodsInfoExample example) {
		BEGIN();
		DELETE_FROM("bs_goods_info");
		applyWhere(example, false);
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table bs_goods_info
	 *
	 * @mbggenerated Fri Feb 24 18:06:23 CST 2017
	 */
	public String insertSelective(BsGoodsInfo record) {
		BEGIN();
		INSERT_INTO("bs_goods_info");

		if (record.getId() != null) {
			VALUES("id", "#{id,jdbcType=BIGINT}");
		}

		if (record.getProcessStatus() != null) {
			VALUES("process_status", "#{processStatus,jdbcType=INTEGER}");
		}

		if (record.getCheckServiceStatus() != null) {
			VALUES("check_service_status", "#{checkServiceStatus,jdbcType=INTEGER}");
		}

		if (record.getServiceType() != null) {
			VALUES("service_type", "#{serviceType,jdbcType=INTEGER}");
		}

		if (record.getUserId() != null) {
			VALUES("user_id", "#{userId,jdbcType=INTEGER}");
		}

		if (record.getUserName() != null) {
			VALUES("user_name", "#{userName,jdbcType=VARCHAR}");
		}

		if (record.getAddress() != null) {
			VALUES("address", "#{address,jdbcType=VARCHAR}");
		}

		if (record.getUserPhone() != null) {
			VALUES("user_phone", "#{userPhone,jdbcType=VARCHAR}");
		}

		if (record.getFoodType() != null) {
			VALUES("food_type", "#{foodType,jdbcType=INTEGER}");
		}

		if (record.getFoodPrice() != null) {
			VALUES("food_price", "#{foodPrice,jdbcType=DOUBLE}");
		}

		if (record.getFoodNum() != null) {
			VALUES("food_num", "#{foodNum,jdbcType=DOUBLE}");
		}

		if (record.getFoodRequire() != null) {
			VALUES("food_require", "#{foodRequire,jdbcType=VARCHAR}");
		}

		if (record.getLocation() != null) {
			VALUES("location", "#{location,jdbcType=INTEGER}");
		}

		if (record.getLocationDesc() != null) {
			VALUES("location_desc", "#{locationDesc,jdbcType=VARCHAR}");
		}

		if (record.getCheckStatus() != null) {
			VALUES("check_status", "#{checkStatus,jdbcType=INTEGER}");
		}

		if (record.getCheckUserId() != null) {
			VALUES("check_user_id", "#{checkUserId,jdbcType=INTEGER}");
		}

		if (record.getCheckUserName() != null) {
			VALUES("check_user_name", "#{checkUserName,jdbcType=VARCHAR}");
		}

		if (record.getCheckUserTime() != null) {
			VALUES("check_user_time", "#{checkUserTime,jdbcType=TIMESTAMP}");
		}

		if (record.getFoodSource() != null) {
			VALUES("food_source", "#{foodSource,jdbcType=VARCHAR}");
		}

		if (record.getHasInvoice() != null) {
			VALUES("has_invoice", "#{hasInvoice,jdbcType=INTEGER}");
		}

		if (record.getPriceType() != null) {
			VALUES("price_type", "#{priceType,jdbcType=INTEGER}");
		}

		if (record.getPayMethod() != null) {
			VALUES("pay_method", "#{payMethod,jdbcType=INTEGER}");
		}

		if (record.getAbandonReasonCode() != null) {
			VALUES("abandon_reason_code", "#{abandonReasonCode,jdbcType=INTEGER}");
		}

		if (record.getAbandonReason() != null) {
			VALUES("abandon_reason", "#{abandonReason,jdbcType=VARCHAR}");
		}

		if (record.getRemark() != null) {
			VALUES("remark", "#{remark,jdbcType=VARCHAR}");
		}

		if (record.getOperateUserId() != null) {
			VALUES("operate_user_id", "#{operateUserId,jdbcType=INTEGER}");
		}

		if (record.getOpearateUserName() != null) {
			VALUES("opearate_user_name", "#{opearateUserName,jdbcType=VARCHAR}");
		}

		if (record.getViewCount() != null) {
			VALUES("view_count", "#{viewCount,jdbcType=INTEGER}");
		}

		if (record.getCreateTime() != null) {
			VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
		}

		if (record.getModifyTime() != null) {
			VALUES("modify_time", "#{modifyTime,jdbcType=TIMESTAMP}");
		}

		if (record.getAuthStatus() != null) {
			VALUES("auth_status", "#{authStatus,jdbcType=INTEGER}");
		}

		if (record.getHasLogistics() != null) {
			VALUES("has_logistics", "#{hasLogistics,jdbcType=INTEGER}");
		}

		if (record.getGrainLevel() != null) {
			VALUES("grain_level", "#{grainLevel,jdbcType=INTEGER}");
		}

		if (record.getCategory() != null) {
			VALUES("category", "#{category,jdbcType=INTEGER}");
		}

		if (record.getCreateUserid() != null) {
			VALUES("create_userid", "#{createUserid,jdbcType=INTEGER}");
		}

		if (record.getCreateUsername() != null) {
			VALUES("create_username", "#{createUsername,jdbcType=VARCHAR}");
		}

		if (record.getColumn1() != null) {
			VALUES("column1", "#{column1,jdbcType=VARCHAR}");
		}

		if (record.getColumn2() != null) {
			VALUES("column2", "#{column2,jdbcType=VARCHAR}");
		}

		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table bs_goods_info
	 *
	 * @mbggenerated Fri Feb 24 18:06:23 CST 2017
	 */
	public String selectByExample(BsGoodsInfoExample example) {
		BEGIN();
		if (example != null && example.isDistinct()) {
			SELECT_DISTINCT("id");
		} else {
			SELECT("id");
		}
		SELECT("process_status");
		SELECT("check_service_status");
		SELECT("service_type");
		SELECT("user_id");
		SELECT("user_name");
		SELECT("address");
		SELECT("user_phone");
		SELECT("food_type");
		SELECT("food_price");
		SELECT("food_num");
		SELECT("food_require");
		SELECT("location");
		SELECT("location_desc");
		SELECT("check_status");
		SELECT("check_user_id");
		SELECT("check_user_name");
		SELECT("check_user_time");
		SELECT("food_source");
		SELECT("has_invoice");
		SELECT("price_type");
		SELECT("pay_method");
		SELECT("abandon_reason_code");
		SELECT("abandon_reason");
		SELECT("remark");
		SELECT("operate_user_id");
		SELECT("opearate_user_name");
		SELECT("view_count");
		SELECT("create_time");
		SELECT("modify_time");
		SELECT("auth_status");
		SELECT("has_logistics");
		SELECT("grain_level");
		SELECT("category");
		SELECT("create_userid");
		SELECT("create_username");
		SELECT("column1");
		SELECT("column2");
		FROM("bs_goods_info");
		applyWhere(example, false);

		if (example != null && example.getOrderByClause() != null) {
			ORDER_BY(example.getOrderByClause());
		}

		if (example != null) {
			return SQL().concat(" limit " + example.getOffset() + "," + example.getLimit());
		}
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table bs_goods_info
	 *
	 * @mbggenerated Fri Feb 24 18:06:23 CST 2017
	 */
	public String updateByExampleSelective(Map<String, Object> parameter) {
		BsGoodsInfo record = (BsGoodsInfo) parameter.get("record");
		BsGoodsInfoExample example = (BsGoodsInfoExample) parameter.get("example");

		BEGIN();
		UPDATE("bs_goods_info");

		if (record.getId() != null) {
			SET("id = #{record.id,jdbcType=BIGINT}");
		}

		if (record.getProcessStatus() != null) {
			SET("process_status = #{record.processStatus,jdbcType=INTEGER}");
		}

		if (record.getCheckServiceStatus() != null) {
			SET("check_service_status = #{record.checkServiceStatus,jdbcType=INTEGER}");
		}

		if (record.getServiceType() != null) {
			SET("service_type = #{record.serviceType,jdbcType=INTEGER}");
		}

		if (record.getUserId() != null) {
			SET("user_id = #{record.userId,jdbcType=INTEGER}");
		}

		if (record.getUserName() != null) {
			SET("user_name = #{record.userName,jdbcType=VARCHAR}");
		}

		if (record.getAddress() != null) {
			SET("address = #{record.address,jdbcType=VARCHAR}");
		}

		if (record.getUserPhone() != null) {
			SET("user_phone = #{record.userPhone,jdbcType=VARCHAR}");
		}

		if (record.getFoodType() != null) {
			SET("food_type = #{record.foodType,jdbcType=INTEGER}");
		}

		if (record.getFoodPrice() != null) {
			SET("food_price = #{record.foodPrice,jdbcType=DOUBLE}");
		}

		if (record.getFoodNum() != null) {
			SET("food_num = #{record.foodNum,jdbcType=DOUBLE}");
		}

		if (record.getFoodRequire() != null) {
			SET("food_require = #{record.foodRequire,jdbcType=VARCHAR}");
		}

		if (record.getLocation() != null) {
			SET("location = #{record.location,jdbcType=INTEGER}");
		}

		if (record.getLocationDesc() != null) {
			SET("location_desc = #{record.locationDesc,jdbcType=VARCHAR}");
		}

		if (record.getCheckStatus() != null) {
			SET("check_status = #{record.checkStatus,jdbcType=INTEGER}");
		}

		if (record.getCheckUserId() != null) {
			SET("check_user_id = #{record.checkUserId,jdbcType=INTEGER}");
		}

		if (record.getCheckUserName() != null) {
			SET("check_user_name = #{record.checkUserName,jdbcType=VARCHAR}");
		}

		if (record.getCheckUserTime() != null) {
			SET("check_user_time = #{record.checkUserTime,jdbcType=TIMESTAMP}");
		}

		if (record.getFoodSource() != null) {
			SET("food_source = #{record.foodSource,jdbcType=VARCHAR}");
		}

		if (record.getHasInvoice() != null) {
			SET("has_invoice = #{record.hasInvoice,jdbcType=INTEGER}");
		}

		if (record.getPriceType() != null) {
			SET("price_type = #{record.priceType,jdbcType=INTEGER}");
		}

		if (record.getPayMethod() != null) {
			SET("pay_method = #{record.payMethod,jdbcType=INTEGER}");
		}

		if (record.getAbandonReasonCode() != null) {
			SET("abandon_reason_code = #{record.abandonReasonCode,jdbcType=INTEGER}");
		}

		if (record.getAbandonReason() != null) {
			SET("abandon_reason = #{record.abandonReason,jdbcType=VARCHAR}");
		}

		if (record.getRemark() != null) {
			SET("remark = #{record.remark,jdbcType=VARCHAR}");
		}

		if (record.getOperateUserId() != null) {
			SET("operate_user_id = #{record.operateUserId,jdbcType=INTEGER}");
		}

		if (record.getOpearateUserName() != null) {
			SET("opearate_user_name = #{record.opearateUserName,jdbcType=VARCHAR}");
		}

		if (record.getViewCount() != null) {
			SET("view_count = #{record.viewCount,jdbcType=INTEGER}");
		}

		if (record.getCreateTime() != null) {
			SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
		}

		if (record.getModifyTime() != null) {
			SET("modify_time = #{record.modifyTime,jdbcType=TIMESTAMP}");
		}

		if (record.getAuthStatus() != null) {
			SET("auth_status = #{record.authStatus,jdbcType=INTEGER}");
		}

		if (record.getHasLogistics() != null) {
			SET("has_logistics = #{record.hasLogistics,jdbcType=INTEGER}");
		}

		if (record.getGrainLevel() != null) {
			SET("grain_level = #{record.grainLevel,jdbcType=INTEGER}");
		}

		if (record.getCategory() != null) {
			SET("category = #{record.category,jdbcType=INTEGER}");
		}

		if (record.getCreateUserid() != null) {
			SET("create_userid = #{record.createUserid,jdbcType=INTEGER}");
		}

		if (record.getCreateUsername() != null) {
			SET("create_username = #{record.createUsername,jdbcType=VARCHAR}");
		}

		if (record.getColumn1() != null) {
			SET("column1 = #{record.column1,jdbcType=VARCHAR}");
		}

		if (record.getColumn2() != null) {
			SET("column2 = #{record.column2,jdbcType=VARCHAR}");
		}

		applyWhere(example, true);
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table bs_goods_info
	 *
	 * @mbggenerated Fri Feb 24 18:06:23 CST 2017
	 */
	public String updateByExample(Map<String, Object> parameter) {
		BEGIN();
		UPDATE("bs_goods_info");

		SET("id = #{record.id,jdbcType=BIGINT}");
		SET("process_status = #{record.processStatus,jdbcType=INTEGER}");
		SET("check_service_status = #{record.checkServiceStatus,jdbcType=INTEGER}");
		SET("service_type = #{record.serviceType,jdbcType=INTEGER}");
		SET("user_id = #{record.userId,jdbcType=INTEGER}");
		SET("user_name = #{record.userName,jdbcType=VARCHAR}");
		SET("address = #{record.address,jdbcType=VARCHAR}");
		SET("user_phone = #{record.userPhone,jdbcType=VARCHAR}");
		SET("food_type = #{record.foodType,jdbcType=INTEGER}");
		SET("food_price = #{record.foodPrice,jdbcType=DOUBLE}");
		SET("food_num = #{record.foodNum,jdbcType=DOUBLE}");
		SET("food_require = #{record.foodRequire,jdbcType=VARCHAR}");
		SET("location = #{record.location,jdbcType=INTEGER}");
		SET("location_desc = #{record.locationDesc,jdbcType=VARCHAR}");
		SET("check_status = #{record.checkStatus,jdbcType=INTEGER}");
		SET("check_user_id = #{record.checkUserId,jdbcType=INTEGER}");
		SET("check_user_name = #{record.checkUserName,jdbcType=VARCHAR}");
		SET("check_user_time = #{record.checkUserTime,jdbcType=TIMESTAMP}");
		SET("food_source = #{record.foodSource,jdbcType=VARCHAR}");
		SET("has_invoice = #{record.hasInvoice,jdbcType=INTEGER}");
		SET("price_type = #{record.priceType,jdbcType=INTEGER}");
		SET("pay_method = #{record.payMethod,jdbcType=INTEGER}");
		SET("abandon_reason_code = #{record.abandonReasonCode,jdbcType=INTEGER}");
		SET("abandon_reason = #{record.abandonReason,jdbcType=VARCHAR}");
		SET("remark = #{record.remark,jdbcType=VARCHAR}");
		SET("operate_user_id = #{record.operateUserId,jdbcType=INTEGER}");
		SET("opearate_user_name = #{record.opearateUserName,jdbcType=VARCHAR}");
		SET("view_count = #{record.viewCount,jdbcType=INTEGER}");
		SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
		SET("modify_time = #{record.modifyTime,jdbcType=TIMESTAMP}");
		SET("auth_status = #{record.authStatus,jdbcType=INTEGER}");
		SET("has_logistics = #{record.hasLogistics,jdbcType=INTEGER}");
		SET("grain_level = #{record.grainLevel,jdbcType=INTEGER}");
		SET("category = #{record.category,jdbcType=INTEGER}");
		SET("create_userid = #{record.createUserid,jdbcType=INTEGER}");
		SET("create_username = #{record.createUsername,jdbcType=VARCHAR}");
		SET("column1 = #{record.column1,jdbcType=VARCHAR}");
		SET("column2 = #{record.column2,jdbcType=VARCHAR}");

		BsGoodsInfoExample example = (BsGoodsInfoExample) parameter.get("example");
		applyWhere(example, true);
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table bs_goods_info
	 *
	 * @mbggenerated Fri Feb 24 18:06:23 CST 2017
	 */
	public String updateByPrimaryKeySelective(BsGoodsInfo record) {
		BEGIN();
		UPDATE("bs_goods_info");

		if (record.getProcessStatus() != null) {
			SET("process_status = #{processStatus,jdbcType=INTEGER}");
		}

		if (record.getCheckServiceStatus() != null) {
			SET("check_service_status = #{checkServiceStatus,jdbcType=INTEGER}");
		}

		if (record.getServiceType() != null) {
			SET("service_type = #{serviceType,jdbcType=INTEGER}");
		}

		if (record.getUserId() != null) {
			SET("user_id = #{userId,jdbcType=INTEGER}");
		}

		if (record.getUserName() != null) {
			SET("user_name = #{userName,jdbcType=VARCHAR}");
		}

		if (record.getAddress() != null) {
			SET("address = #{address,jdbcType=VARCHAR}");
		}

		if (record.getUserPhone() != null) {
			SET("user_phone = #{userPhone,jdbcType=VARCHAR}");
		}

		if (record.getFoodType() != null) {
			SET("food_type = #{foodType,jdbcType=INTEGER}");
		}

		if (record.getFoodPrice() != null) {
			SET("food_price = #{foodPrice,jdbcType=DOUBLE}");
		}

		if (record.getFoodNum() != null) {
			SET("food_num = #{foodNum,jdbcType=DOUBLE}");
		}

		if (record.getFoodRequire() != null) {
			SET("food_require = #{foodRequire,jdbcType=VARCHAR}");
		}

		if (record.getLocation() != null) {
			SET("location = #{location,jdbcType=INTEGER}");
		}

		if (record.getLocationDesc() != null) {
			SET("location_desc = #{locationDesc,jdbcType=VARCHAR}");
		}

		if (record.getCheckStatus() != null) {
			SET("check_status = #{checkStatus,jdbcType=INTEGER}");
		}

		if (record.getCheckUserId() != null) {
			SET("check_user_id = #{checkUserId,jdbcType=INTEGER}");
		}

		if (record.getCheckUserName() != null) {
			SET("check_user_name = #{checkUserName,jdbcType=VARCHAR}");
		}

		if (record.getCheckUserTime() != null) {
			SET("check_user_time = #{checkUserTime,jdbcType=TIMESTAMP}");
		}

		if (record.getFoodSource() != null) {
			SET("food_source = #{foodSource,jdbcType=VARCHAR}");
		}

		if (record.getHasInvoice() != null) {
			SET("has_invoice = #{hasInvoice,jdbcType=INTEGER}");
		}

		if (record.getPriceType() != null) {
			SET("price_type = #{priceType,jdbcType=INTEGER}");
		}

		if (record.getPayMethod() != null) {
			SET("pay_method = #{payMethod,jdbcType=INTEGER}");
		}

		if (record.getAbandonReasonCode() != null) {
			SET("abandon_reason_code = #{abandonReasonCode,jdbcType=INTEGER}");
		}

		if (record.getAbandonReason() != null) {
			SET("abandon_reason = #{abandonReason,jdbcType=VARCHAR}");
		}

		if (record.getRemark() != null) {
			SET("remark = #{remark,jdbcType=VARCHAR}");
		}

		if (record.getOperateUserId() != null) {
			SET("operate_user_id = #{operateUserId,jdbcType=INTEGER}");
		}

		if (record.getOpearateUserName() != null) {
			SET("opearate_user_name = #{opearateUserName,jdbcType=VARCHAR}");
		}

		if (record.getViewCount() != null) {
			SET("view_count = #{viewCount,jdbcType=INTEGER}");
		}

		if (record.getCreateTime() != null) {
			SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
		}

		if (record.getModifyTime() != null) {
			SET("modify_time = #{modifyTime,jdbcType=TIMESTAMP}");
		}

		if (record.getAuthStatus() != null) {
			SET("auth_status = #{authStatus,jdbcType=INTEGER}");
		}

		if (record.getHasLogistics() != null) {
			SET("has_logistics = #{hasLogistics,jdbcType=INTEGER}");
		}

		if (record.getGrainLevel() != null) {
			SET("grain_level = #{grainLevel,jdbcType=INTEGER}");
		}

		if (record.getCategory() != null) {
			SET("category = #{category,jdbcType=INTEGER}");
		}

		if (record.getCreateUserid() != null) {
			SET("create_userid = #{createUserid,jdbcType=INTEGER}");
		}

		if (record.getCreateUsername() != null) {
			SET("create_username = #{createUsername,jdbcType=VARCHAR}");
		}

		if (record.getColumn1() != null) {
			SET("column1 = #{column1,jdbcType=VARCHAR}");
		}

		if (record.getColumn2() != null) {
			SET("column2 = #{column2,jdbcType=VARCHAR}");
		}

		WHERE("id = #{id,jdbcType=BIGINT}");

		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table bs_goods_info
	 *
	 * @mbggenerated Fri Feb 24 18:06:23 CST 2017
	 */
	protected void applyWhere(BsGoodsInfoExample example, boolean includeExamplePhrase) {
		if (example == null) {
			return;
		}

		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase) {
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else {
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}

		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++) {
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid()) {
				if (firstCriteria) {
					firstCriteria = false;
				} else {
					sb.append(" or ");
				}

				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++) {
					Criterion criterion = criterions.get(j);
					if (firstCriterion) {
						firstCriterion = false;
					} else {
						sb.append(" and ");
					}

					if (criterion.isNoValue()) {
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
						} else {
							sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
						} else {
							sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue()) {
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++) {
							if (comma) {
								sb.append(", ");
							} else {
								comma = true;
							}
							if (criterion.getTypeHandler() == null) {
								sb.append(String.format(parmPhrase3, i, j, k));
							} else {
								sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}

		if (sb.length() > 0) {
			WHERE(sb.toString());
		}
	}
}
package lb.rest.user.db.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import java.util.List;
import java.util.Map;
import lb.rest.user.db.entity.BsTempTrade;
import lb.rest.user.db.entity.BsTempTradeExample.Criteria;
import lb.rest.user.db.entity.BsTempTradeExample.Criterion;
import lb.rest.user.db.entity.BsTempTradeExample;

public class BsTempTradeSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_temp_trade
     *
     * @mbggenerated Tue May 23 15:30:01 CST 2017
     */
    public String countByExample(BsTempTradeExample example) {
        BEGIN();
        SELECT("count(*)");
        FROM("bs_temp_trade");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_temp_trade
     *
     * @mbggenerated Tue May 23 15:30:01 CST 2017
     */
    public String deleteByExample(BsTempTradeExample example) {
        BEGIN();
        DELETE_FROM("bs_temp_trade");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_temp_trade
     *
     * @mbggenerated Tue May 23 15:30:01 CST 2017
     */
    public String insertSelective(BsTempTrade record) {
        BEGIN();
        INSERT_INTO("bs_temp_trade");
        
        if (record.getBuyId() != null) {
            VALUES("buy_id", "#{buyId,jdbcType=INTEGER}");
        }
        
        if (record.getBuyName() != null) {
            VALUES("buy_name", "#{buyName,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyPhone() != null) {
            VALUES("buy_phone", "#{buyPhone,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyAddress() != null) {
            VALUES("buy_address", "#{buyAddress,jdbcType=VARCHAR}");
        }
        
        if (record.getCompanyName() != null) {
            VALUES("company_name", "#{companyName,jdbcType=VARCHAR}");
        }
        
        if (record.getRegTime() != null) {
            VALUES("reg_time", "#{regTime,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyFoodType() != null) {
            VALUES("buy_food_type", "#{buyFoodType,jdbcType=INTEGER}");
        }
        
        if (record.getBuyFoodName() != null) {
            VALUES("buy_food_name", "#{buyFoodName,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyFoodPrice() != null) {
            VALUES("buy_food_price", "#{buyFoodPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getBuyFoodRequire() != null) {
            VALUES("buy_food_require", "#{buyFoodRequire,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyLocationS() != null) {
            VALUES("buy_location_s", "#{buyLocationS,jdbcType=INTEGER}");
        }
        
        if (record.getBuyLocationDescS() != null) {
            VALUES("buy_location_desc_s", "#{buyLocationDescS,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyLocation() != null) {
            VALUES("buy_location", "#{buyLocation,jdbcType=INTEGER}");
        }
        
        if (record.getBuyLocationDesc() != null) {
            VALUES("buy_location_desc", "#{buyLocationDesc,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getModifyTime() != null) {
            VALUES("modify_time", "#{modifyTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getFoodLevel() != null) {
            VALUES("food_level", "#{foodLevel,jdbcType=INTEGER}");
        }
        
        if (record.getRemark() != null) {
            VALUES("remark", "#{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getAddress() != null) {
            VALUES("address", "#{address,jdbcType=VARCHAR}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_temp_trade
     *
     * @mbggenerated Tue May 23 15:30:01 CST 2017
     */
    public String selectByExample(BsTempTradeExample example) {
        BEGIN();
        if (example != null && example.isDistinct()) {
            SELECT_DISTINCT("id");
        } else {
            SELECT("id");
        }
        SELECT("buy_id");
        SELECT("buy_name");
        SELECT("buy_phone");
        SELECT("buy_address");
        SELECT("company_name");
        SELECT("reg_time");
        SELECT("buy_food_type");
        SELECT("buy_food_name");
        SELECT("buy_food_price");
        SELECT("buy_food_require");
        SELECT("buy_location_s");
        SELECT("buy_location_desc_s");
        SELECT("buy_location");
        SELECT("buy_location_desc");
        SELECT("create_time");
        SELECT("modify_time");
        SELECT("food_level");
        SELECT("remark");
        SELECT("address");
        FROM("bs_temp_trade");
        applyWhere(example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            ORDER_BY(example.getOrderByClause());
        }
        if (example !=null && example.getLimit() > 0 ) { 
        
        	return SQL() + " limit #{offset,jdbcType=INTEGER} , #{limit,jdbcType=INTEGER}";
        	} 
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_temp_trade
     *
     * @mbggenerated Tue May 23 15:30:01 CST 2017
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        BsTempTrade record = (BsTempTrade) parameter.get("record");
        BsTempTradeExample example = (BsTempTradeExample) parameter.get("example");
        
        BEGIN();
        UPDATE("bs_temp_trade");
        
        if (record.getId() != null) {
            SET("id = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getBuyId() != null) {
            SET("buy_id = #{record.buyId,jdbcType=INTEGER}");
        }
        
        if (record.getBuyName() != null) {
            SET("buy_name = #{record.buyName,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyPhone() != null) {
            SET("buy_phone = #{record.buyPhone,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyAddress() != null) {
            SET("buy_address = #{record.buyAddress,jdbcType=VARCHAR}");
        }
        
        if (record.getCompanyName() != null) {
            SET("company_name = #{record.companyName,jdbcType=VARCHAR}");
        }
        
        if (record.getRegTime() != null) {
            SET("reg_time = #{record.regTime,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyFoodType() != null) {
            SET("buy_food_type = #{record.buyFoodType,jdbcType=INTEGER}");
        }
        
        if (record.getBuyFoodName() != null) {
            SET("buy_food_name = #{record.buyFoodName,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyFoodPrice() != null) {
            SET("buy_food_price = #{record.buyFoodPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getBuyFoodRequire() != null) {
            SET("buy_food_require = #{record.buyFoodRequire,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyLocationS() != null) {
            SET("buy_location_s = #{record.buyLocationS,jdbcType=INTEGER}");
        }
        
        if (record.getBuyLocationDescS() != null) {
            SET("buy_location_desc_s = #{record.buyLocationDescS,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyLocation() != null) {
            SET("buy_location = #{record.buyLocation,jdbcType=INTEGER}");
        }
        
        if (record.getBuyLocationDesc() != null) {
            SET("buy_location_desc = #{record.buyLocationDesc,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getModifyTime() != null) {
            SET("modify_time = #{record.modifyTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getFoodLevel() != null) {
            SET("food_level = #{record.foodLevel,jdbcType=INTEGER}");
        }
        
        if (record.getRemark() != null) {
            SET("remark = #{record.remark,jdbcType=VARCHAR}");
        }
        
        if (record.getAddress() != null) {
            SET("address = #{record.address,jdbcType=VARCHAR}");
        }
        
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_temp_trade
     *
     * @mbggenerated Tue May 23 15:30:01 CST 2017
     */
    public String updateByExample(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("bs_temp_trade");
        
        SET("id = #{record.id,jdbcType=INTEGER}");
        SET("buy_id = #{record.buyId,jdbcType=INTEGER}");
        SET("buy_name = #{record.buyName,jdbcType=VARCHAR}");
        SET("buy_phone = #{record.buyPhone,jdbcType=VARCHAR}");
        SET("buy_address = #{record.buyAddress,jdbcType=VARCHAR}");
        SET("company_name = #{record.companyName,jdbcType=VARCHAR}");
        SET("reg_time = #{record.regTime,jdbcType=VARCHAR}");
        SET("buy_food_type = #{record.buyFoodType,jdbcType=INTEGER}");
        SET("buy_food_name = #{record.buyFoodName,jdbcType=VARCHAR}");
        SET("buy_food_price = #{record.buyFoodPrice,jdbcType=DOUBLE}");
        SET("buy_food_require = #{record.buyFoodRequire,jdbcType=VARCHAR}");
        SET("buy_location_s = #{record.buyLocationS,jdbcType=INTEGER}");
        SET("buy_location_desc_s = #{record.buyLocationDescS,jdbcType=VARCHAR}");
        SET("buy_location = #{record.buyLocation,jdbcType=INTEGER}");
        SET("buy_location_desc = #{record.buyLocationDesc,jdbcType=VARCHAR}");
        SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        SET("modify_time = #{record.modifyTime,jdbcType=TIMESTAMP}");
        SET("food_level = #{record.foodLevel,jdbcType=INTEGER}");
        SET("remark = #{record.remark,jdbcType=VARCHAR}");
        SET("address = #{record.address,jdbcType=VARCHAR}");
        
        BsTempTradeExample example = (BsTempTradeExample) parameter.get("example");
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_temp_trade
     *
     * @mbggenerated Tue May 23 15:30:01 CST 2017
     */
    public String updateByPrimaryKeySelective(BsTempTrade record) {
        BEGIN();
        UPDATE("bs_temp_trade");
        
        if (record.getBuyId() != null) {
            SET("buy_id = #{buyId,jdbcType=INTEGER}");
        }
        
        if (record.getBuyName() != null) {
            SET("buy_name = #{buyName,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyPhone() != null) {
            SET("buy_phone = #{buyPhone,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyAddress() != null) {
            SET("buy_address = #{buyAddress,jdbcType=VARCHAR}");
        }
        
        if (record.getCompanyName() != null) {
            SET("company_name = #{companyName,jdbcType=VARCHAR}");
        }
        
        if (record.getRegTime() != null) {
            SET("reg_time = #{regTime,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyFoodType() != null) {
            SET("buy_food_type = #{buyFoodType,jdbcType=INTEGER}");
        }
        
        if (record.getBuyFoodName() != null) {
            SET("buy_food_name = #{buyFoodName,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyFoodPrice() != null) {
            SET("buy_food_price = #{buyFoodPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getBuyFoodRequire() != null) {
            SET("buy_food_require = #{buyFoodRequire,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyLocationS() != null) {
            SET("buy_location_s = #{buyLocationS,jdbcType=INTEGER}");
        }
        
        if (record.getBuyLocationDescS() != null) {
            SET("buy_location_desc_s = #{buyLocationDescS,jdbcType=VARCHAR}");
        }
        
        if (record.getBuyLocation() != null) {
            SET("buy_location = #{buyLocation,jdbcType=INTEGER}");
        }
        
        if (record.getBuyLocationDesc() != null) {
            SET("buy_location_desc = #{buyLocationDesc,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getModifyTime() != null) {
            SET("modify_time = #{modifyTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getFoodLevel() != null) {
            SET("food_level = #{foodLevel,jdbcType=INTEGER}");
        }
        
        if (record.getRemark() != null) {
            SET("remark = #{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getAddress() != null) {
            SET("address = #{address,jdbcType=VARCHAR}");
        }
        
        WHERE("id = #{id,jdbcType=INTEGER}");
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_temp_trade
     *
     * @mbggenerated Tue May 23 15:30:01 CST 2017
     */
    protected void applyWhere(BsTempTradeExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}
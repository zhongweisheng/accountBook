package lb.rest.user.web.action;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import lb.rest.user.db.entity.BsInventoryOperate;
import lb.rest.user.db.entity.BsInventoryOperateExample;
import lb.rest.user.db.entity.BsInventoryOperateExample.Criteria;
import lb.rest.user.db.entity.BsInventoryOperateKey;
import lb.rest.user.db.mapper.BsInventoryOperateMapper;
import lombok.extern.slf4j.Slf4j;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.math.NumberUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mlb.util.JsonDataUtils;
import com.mlb.util.SequenceUtil;
import com.mlb.util.TDateTimeUnits;

import fc.wpf.rest.db.service.DataService;
import fc.wpf.rest.utils.BeanFactory;
import fc.wpf.rest.utils.DBBean;
import fc.wpf.rest.web.action.BasicCtrl;
import fc.wpf.rest.web.bean.DbCondi;
import fc.wpf.rest.web.bean.ListInfo;
import fc.wpf.rest.web.bean.ReturnInfo;
import fc.wpf.rest.web.bean.SqlMaker;
import fc.wpf.rest.web.bind.FieldUtils;

@Slf4j
@Controller
@RequestMapping("/bsinventoryoperate")
public class BsInventoryOperateCtrl extends BasicCtrl {

	private static BsInventoryOperateMapper bsInventoryOperateMapper = (BsInventoryOperateMapper) BeanFactory
			.getBean("bsInventoryOperateMapper");

	private static DataService mysqlDataService = (DataService) BeanFactory.getBean("mysqlDataService");

	/**
	 * ajax单条数据插入 url:'http://ip/rest/bsinventoryoperate'
	 * data:'{"key1":"value1","key2":"value2",...}' type:’POST
	 */
	@RequestMapping(value = "", method = RequestMethod.POST)
	@ResponseBody
	public ReturnInfo insert(BsInventoryOperate info, HttpServletRequest req) {
		try {
			long id = SequenceUtil.getInstance().nextValue("bs_inventory_operate");
			info.setId(id);
			info.setOperateTime(new Date());
			bsInventoryOperateMapper.insert(info);
			return ReturnInfo.Success;
		} catch (Exception e) {
			log.warn("BsInventoryOperateCtrl insert error..", e);
			// e.printStackTrace();
		}
		return ReturnInfo.Faild;
	}

	@RequestMapping(value = "/list", method = RequestMethod.POST)
	@ResponseBody
	public Object list(HttpServletRequest req) {
		JsonDataUtils json = new JsonDataUtils();
		List<BsInventoryOperate> list = null;
		try {
			int ownerId = NumberUtils.toInt(req.getParameter("ownerId"));
			int operateUserId = NumberUtils.toInt(req.getParameter("operateUserId"));
			int operateType = NumberUtils.toInt(req.getParameter("operateType"));
			int depotId = NumberUtils.toInt(req.getParameter("depotId"));

			String startDate = StringUtils.trimToEmpty(req.getParameter("startDate"));
			String endDate = StringUtils.trimToEmpty(req.getParameter("endDate"));

			int currentPage = NumberUtils.toInt(req.getParameter("currentPage"), 1);
			int pageSize = NumberUtils.toInt(req.getParameter("pageSize"), 10);

			BsInventoryOperateExample example = new BsInventoryOperateExample();
			example.setOrderByClause(" operate_time desc ");
			int offset = (currentPage - 1) * pageSize;
			example.setLimit(pageSize);
			example.setOffset(offset);
			Criteria criteria = example.createCriteria();
			if (ownerId > 0) {
				criteria.andOwnerIdEqualTo(ownerId);
			}
			if (operateUserId > 0) {
				criteria.andOperateUserIdEqualTo(operateUserId);
			}
			if (operateType > 0) {
				criteria.andOperateTypeEqualTo(operateType);
			}
			if (depotId > 0) {
				criteria.andDepotIdEqualTo(depotId);
			}

			if (StringUtils.isNotEmpty(startDate)) {
				criteria.andOperateTimeGreaterThanOrEqualTo(TDateTimeUnits.parseDate(startDate));
			}
			if (StringUtils.isNotEmpty(endDate)) {
				criteria.andOperateTimeLessThanOrEqualTo(TDateTimeUnits.parseDate(endDate));
			}

			list = bsInventoryOperateMapper.selectByExample(example);
			int total = bsInventoryOperateMapper.countByExample(example);

			json.setTotal(total);
			boolean success = false;
			int number = offset + 1;
			if (list != null && list.size() > 0) {
				success = true;
				json.addTitle("number", "id", "operateUserName", "operateTime", "operateType", "targetId");
				if (list != null) {
					for (BsInventoryOperate item : list) {
						// String formattedDate =
						// DateUtil.format(item.getCreateTime(),
						// DateStyle.YYYY_MM_DD_HH_MM_SS);
						json.addOneRow(number++, item.getId(), item.getOperateName(),
								TDateTimeUnits.formatDate(item.getOperateTime()), item.getOperateName(),
								item.getTargetId());
					}
				}
			} else {
				success = false;
			}
			json.setSuccess(success);

		} catch (Exception e) {
			log.warn("BsInventoryOperateCtrl get by key error..", e);
		}
		return json.toJsonObj();
	}

	/**
	 * ajax根据ID主键查询 请求 url: 'http://ip/app/bsinventoryoperate/(_id值)' dataType:
	 * 'json' type: 'get'
	 */
	@RequestMapping(value = "/{key}", method = RequestMethod.GET)
	@ResponseBody
	public ListInfo<BsInventoryOperate> get(@PathVariable String key, HttpServletRequest req) {
		int totalCount = 1;
		List<BsInventoryOperate> list = null;
		try {
			BsInventoryOperate akey = new BsInventoryOperate();

			Field keyField = FieldUtils.allDeclaredField(BsInventoryOperateKey.class).get(0);

			if (keyField.getType().isInstance(1)) {
				FieldUtils.setObjectValue(akey, keyField, Integer.parseInt(key));
			} else if (keyField.getType().isInstance(1L)) {
				FieldUtils.setObjectValue(akey, keyField, Long.parseLong(key));
			} else {
				FieldUtils.setObjectValue(akey, keyField, key);
			}

			if (true && akey.getId() == null) {
				list = new ArrayList<BsInventoryOperate>();
			} else {
				BsInventoryOperateExample example = new BsInventoryOperateExample();
				example.createCriteria().andIdEqualTo(akey.getId());
				list = bsInventoryOperateMapper.selectByExample(example);
			}
			totalCount = list.size();
		} catch (Exception e) {
			log.warn("BsInventoryOperateCtrl get by key error..", e);
		}
		return new ListInfo<>(totalCount, list, 0, 1);
	}

	/**
	 * ajax根据主键删除 url:'http://ip/app/bsinventoryoperate/(_id值)' type: 'DELETE'
	 * dataType: 'json'
	 */
	@RequestMapping(value = "/{key}", method = RequestMethod.DELETE)
	@ResponseBody
	public ReturnInfo delete(@PathVariable String key, HttpServletRequest req) {
		try {
			BsInventoryOperate akey = new BsInventoryOperate();

			Field keyField = FieldUtils.allDeclaredField(BsInventoryOperateKey.class).get(0);

			if (keyField.getType().isInstance(1)) {
				FieldUtils.setObjectValue(akey, keyField, Integer.parseInt(key));
			} else if (keyField.getType().isInstance(1L)) {
				FieldUtils.setObjectValue(akey, keyField, Long.parseLong(key));
			} else {
				FieldUtils.setObjectValue(akey, keyField, key);
			}

			if (true && akey.getId() != null) {
				bsInventoryOperateMapper.deleteByPrimaryKey(akey);
				return ReturnInfo.Success;
			}
		} catch (Exception e) {
			log.warn("BsInventoryOperateCtrl delete by key error..");
		}
		return ReturnInfo.Faild;
	}

	/**
	 * ajax根据主键单条修改 url:'http://ip/app/bsinventoryoperate/(_id值)'
	 * data:'{"key1":"value1","key2":"value2",...}' type:'PUT'
	 */
	/*
	 * @RequestMapping(value = "/{key}", method = RequestMethod.POST)
	 * 
	 * @ResponseBody public ReturnInfo update(@PathVariable String key,
	 * BsInventoryOperate info, HttpServletRequest req) { try { if (info !=
	 * null) { BsInventoryOperate akey = new BsInventoryOperate();
	 * 
	 * Field keyField =
	 * FieldUtils.allDeclaredField(BsInventoryOperateKey.class).get(0);
	 * 
	 * if (keyField.getType().isInstance(1)) { FieldUtils.setObjectValue(akey,
	 * keyField, Integer.parseInt(key)); } else if
	 * (keyField.getType().isInstance(1L)) { FieldUtils.setObjectValue(akey,
	 * keyField, Long.parseLong(key)); } else { FieldUtils.setObjectValue(akey,
	 * keyField, key); } BsInventoryOperateExample example = new
	 * BsInventoryOperateExample();
	 * example.createCriteria().andIdEqualTo(akey.getId());
	 * info.setUpdateTime(new Date());
	 * bsInventoryOperateMapper.updateByExampleSelective(info, example); }
	 * return ReturnInfo.Success; } catch (Exception e) {
	 * log.warn("BsInventoryOperate update by key error.."); } return
	 * ReturnInfo.Faild; }
	 */

	private void setTableName(DbCondi dc) {
		String tName = DBBean.getTableName2Class(BsInventoryOperate.class);
		if (dc.getOther() == null) {
			Map<String, Object> o = new HashMap<String, Object>();
			o.put(SqlMaker.TABLE_NAME, tName);
			dc.setOther(o);
		} else {
			dc.getOther().put(SqlMaker.TABLE_NAME, tName);
		}
	}

	@SuppressWarnings("serial")
	public static class BsInventoryOperates extends ArrayList<BsInventoryOperate> {
		public BsInventoryOperates() {
			super();
		}
	}
}
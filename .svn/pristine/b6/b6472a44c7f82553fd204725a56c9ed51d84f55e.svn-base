package lb.rest.trade.db.mapper;

import fc.wpf.rest.db.iface.StaticTableDaoSupport;
import java.util.List;
import lb.rest.trade.db.entity.BsUserRequire;
import lb.rest.trade.db.entity.BsUserRequireExample;
import lb.rest.trade.db.entity.BsUserRequireKey;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface BsUserRequireMapper extends StaticTableDaoSupport<BsUserRequire, BsUserRequireExample, BsUserRequireKey> {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require
     *
     * @mbggenerated Fri Feb 24 18:06:23 CST 2017
     */
    @SelectProvider(type=BsUserRequireSqlProvider.class, method="countByExample")
    int countByExample(BsUserRequireExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require
     *
     * @mbggenerated Fri Feb 24 18:06:23 CST 2017
     */
    @DeleteProvider(type=BsUserRequireSqlProvider.class, method="deleteByExample")
    int deleteByExample(BsUserRequireExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require
     *
     * @mbggenerated Fri Feb 24 18:06:23 CST 2017
     */
    @Delete({
        "delete from bs_user_require",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(BsUserRequireKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require
     *
     * @mbggenerated Fri Feb 24 18:06:23 CST 2017
     */
    @Insert({
        "insert into bs_user_require (id, process_status, ",
        "service_type, buy_id, ",
        "buy_name, buy_address, ",
        "buy_phone, buy_food_type, ",
        "buy_food_price, buy_food_num, ",
        "buy_food_require, buy_location_s, ",
        "buy_location_desc_s, buy_location, ",
        "buy_location_desc, check_status, ",
        "check_user_id, check_user_name, ",
        "check_user_time, check_client_status, ",
        "check_client_id, check_client_name, ",
        "check_client_time, check_client_remark, ",
        "trader_id, trader_name, ",
        "trader_phone, apply_allocation, ",
        "reality_buy_price_type, reality_sell_price_type, ",
        "reality_buy_price, reality_sell_price, ",
        "reality_buy_pay_method, reality_sell_pay_method, ",
        "reality_buy_require, reality_sell_require, ",
        "reality_logistics_info, abandon_reason_code, ",
        "abandon_reason, match_goods_id, ",
        "view_count, create_time, ",
        "modify_time, from_type, ",
        "complete_time, create_userid, ",
        "create_username, auth_status, ",
        "has_logistics, grain_level, ",
        "category, address,remark, ",
        "column1, column2)",
        "values (#{id,jdbcType=BIGINT}, #{processStatus,jdbcType=INTEGER}, ",
        "#{serviceType,jdbcType=INTEGER}, #{buyId,jdbcType=INTEGER}, ",
        "#{buyName,jdbcType=VARCHAR}, #{buyAddress,jdbcType=VARCHAR}, ",
        "#{buyPhone,jdbcType=VARCHAR}, #{buyFoodType,jdbcType=INTEGER}, ",
        "#{buyFoodPrice,jdbcType=DOUBLE}, #{buyFoodNum,jdbcType=DOUBLE}, ",
        "#{buyFoodRequire,jdbcType=VARCHAR}, #{buyLocationS,jdbcType=INTEGER}, ",
        "#{buyLocationDescS,jdbcType=VARCHAR}, #{buyLocation,jdbcType=INTEGER}, ",
        "#{buyLocationDesc,jdbcType=VARCHAR}, #{checkStatus,jdbcType=INTEGER}, ",
        "#{checkUserId,jdbcType=INTEGER}, #{checkUserName,jdbcType=VARCHAR}, ",
        "#{checkUserTime,jdbcType=TIMESTAMP}, #{checkClientStatus,jdbcType=INTEGER}, ",
        "#{checkClientId,jdbcType=INTEGER}, #{checkClientName,jdbcType=VARCHAR}, ",
        "#{checkClientTime,jdbcType=TIMESTAMP}, #{checkClientRemark,jdbcType=VARCHAR}, ",
        "#{traderId,jdbcType=INTEGER}, #{traderName,jdbcType=VARCHAR}, ",
        "#{traderPhone,jdbcType=VARCHAR}, #{applyAllocation,jdbcType=INTEGER}, ",
        "#{realityBuyPriceType,jdbcType=INTEGER}, #{realitySellPriceType,jdbcType=INTEGER}, ",
        "#{realityBuyPrice,jdbcType=DOUBLE}, #{realitySellPrice,jdbcType=DOUBLE}, ",
        "#{realityBuyPayMethod,jdbcType=INTEGER}, #{realitySellPayMethod,jdbcType=INTEGER}, ",
        "#{realityBuyRequire,jdbcType=VARCHAR}, #{realitySellRequire,jdbcType=VARCHAR}, ",
        "#{realityLogisticsInfo,jdbcType=VARCHAR}, #{abandonReasonCode,jdbcType=INTEGER}, ",
        "#{abandonReason,jdbcType=VARCHAR}, #{matchGoodsId,jdbcType=INTEGER}, ",
        "#{viewCount,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, ",
        "#{modifyTime,jdbcType=TIMESTAMP}, #{fromType,jdbcType=INTEGER}, ",
        "#{completeTime,jdbcType=TIMESTAMP}, #{createUserid,jdbcType=INTEGER}, ",
        "#{createUsername,jdbcType=VARCHAR}, #{authStatus,jdbcType=INTEGER}, ",
        "#{hasLogistics,jdbcType=INTEGER}, #{grainLevel,jdbcType=INTEGER}, ",
        "#{category,jdbcType=INTEGER}, #{address,jdbcType=VARCHAR},#{remark,jdbcType=VARCHAR}, ",
        "#{column1,jdbcType=VARCHAR}, #{column2,jdbcType=VARCHAR})"
    })
    int insert(BsUserRequire record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require
     *
     * @mbggenerated Fri Feb 24 18:06:23 CST 2017
     */
    @InsertProvider(type=BsUserRequireSqlProvider.class, method="insertSelective")
    int insertSelective(BsUserRequire record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require
     *
     * @mbggenerated Fri Feb 24 18:06:23 CST 2017
     */
    @SelectProvider(type=BsUserRequireSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="process_status", property="processStatus", jdbcType=JdbcType.INTEGER),
        @Result(column="service_type", property="serviceType", jdbcType=JdbcType.INTEGER),
        @Result(column="buy_id", property="buyId", jdbcType=JdbcType.INTEGER),
        @Result(column="buy_name", property="buyName", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_address", property="buyAddress", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_phone", property="buyPhone", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_food_type", property="buyFoodType", jdbcType=JdbcType.INTEGER),
        @Result(column="buy_food_price", property="buyFoodPrice", jdbcType=JdbcType.DOUBLE),
        @Result(column="buy_food_num", property="buyFoodNum", jdbcType=JdbcType.DOUBLE),
        @Result(column="buy_food_require", property="buyFoodRequire", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_location_s", property="buyLocationS", jdbcType=JdbcType.INTEGER),
        @Result(column="buy_location_desc_s", property="buyLocationDescS", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_location", property="buyLocation", jdbcType=JdbcType.INTEGER),
        @Result(column="buy_location_desc", property="buyLocationDesc", jdbcType=JdbcType.VARCHAR),
        @Result(column="check_status", property="checkStatus", jdbcType=JdbcType.INTEGER),
        @Result(column="check_user_id", property="checkUserId", jdbcType=JdbcType.INTEGER),
        @Result(column="check_user_name", property="checkUserName", jdbcType=JdbcType.VARCHAR),
        @Result(column="check_user_time", property="checkUserTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="check_client_status", property="checkClientStatus", jdbcType=JdbcType.INTEGER),
        @Result(column="check_client_id", property="checkClientId", jdbcType=JdbcType.INTEGER),
        @Result(column="check_client_name", property="checkClientName", jdbcType=JdbcType.VARCHAR),
        @Result(column="check_client_time", property="checkClientTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="check_client_remark", property="checkClientRemark", jdbcType=JdbcType.VARCHAR),
        @Result(column="trader_id", property="traderId", jdbcType=JdbcType.INTEGER),
        @Result(column="trader_name", property="traderName", jdbcType=JdbcType.VARCHAR),
        @Result(column="trader_phone", property="traderPhone", jdbcType=JdbcType.VARCHAR),
        @Result(column="apply_allocation", property="applyAllocation", jdbcType=JdbcType.INTEGER),
        @Result(column="reality_buy_price_type", property="realityBuyPriceType", jdbcType=JdbcType.INTEGER),
        @Result(column="reality_sell_price_type", property="realitySellPriceType", jdbcType=JdbcType.INTEGER),
        @Result(column="reality_buy_price", property="realityBuyPrice", jdbcType=JdbcType.DOUBLE),
        @Result(column="reality_sell_price", property="realitySellPrice", jdbcType=JdbcType.DOUBLE),
        @Result(column="reality_buy_pay_method", property="realityBuyPayMethod", jdbcType=JdbcType.INTEGER),
        @Result(column="reality_sell_pay_method", property="realitySellPayMethod", jdbcType=JdbcType.INTEGER),
        @Result(column="reality_buy_require", property="realityBuyRequire", jdbcType=JdbcType.VARCHAR),
        @Result(column="reality_sell_require", property="realitySellRequire", jdbcType=JdbcType.VARCHAR),
        @Result(column="reality_logistics_info", property="realityLogisticsInfo", jdbcType=JdbcType.VARCHAR),
        @Result(column="abandon_reason_code", property="abandonReasonCode", jdbcType=JdbcType.INTEGER),
        @Result(column="abandon_reason", property="abandonReason", jdbcType=JdbcType.VARCHAR),
        @Result(column="match_goods_id", property="matchGoodsId", jdbcType=JdbcType.INTEGER),
        @Result(column="view_count", property="viewCount", jdbcType=JdbcType.INTEGER),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="modify_time", property="modifyTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="from_type", property="fromType", jdbcType=JdbcType.INTEGER),
        @Result(column="complete_time", property="completeTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="create_userid", property="createUserid", jdbcType=JdbcType.INTEGER),
        @Result(column="create_username", property="createUsername", jdbcType=JdbcType.VARCHAR),
        @Result(column="auth_status", property="authStatus", jdbcType=JdbcType.INTEGER),
        @Result(column="has_logistics", property="hasLogistics", jdbcType=JdbcType.INTEGER),
        @Result(column="grain_level", property="grainLevel", jdbcType=JdbcType.INTEGER),
        @Result(column="category", property="category", jdbcType=JdbcType.INTEGER),
        @Result(column="remark", property="remark", jdbcType=JdbcType.VARCHAR),
        @Result(column="address", property="address", jdbcType=JdbcType.VARCHAR),
        @Result(column="column1", property="column1", jdbcType=JdbcType.VARCHAR),
        @Result(column="column2", property="column2", jdbcType=JdbcType.VARCHAR)
    })
    List<BsUserRequire> selectByExample(BsUserRequireExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require
     *
     * @mbggenerated Fri Feb 24 18:06:23 CST 2017
     */
    @Select({
        "select",
        "id, process_status, service_type, buy_id, buy_name, buy_address, buy_phone, ",
        "buy_food_type, buy_food_price, buy_food_num, buy_food_require, buy_location_s, ",
        "buy_location_desc_s, buy_location, buy_location_desc, check_status, check_user_id, ",
        "check_user_name, check_user_time, check_client_status, check_client_id, check_client_name, ",
        "check_client_time, check_client_remark, trader_id, trader_name, trader_phone, ",
        "apply_allocation, reality_buy_price_type, reality_sell_price_type, reality_buy_price, ",
        "reality_sell_price, reality_buy_pay_method, reality_sell_pay_method, reality_buy_require, ",
        "reality_sell_require, reality_logistics_info, abandon_reason_code, abandon_reason, ",
        "match_goods_id, view_count, create_time, modify_time, from_type, complete_time, ",
        "create_userid, create_username, auth_status, has_logistics, grain_level, category, ",
        "address,remark, column1, column2",
        "from bs_user_require",
        "where id = #{id,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="process_status", property="processStatus", jdbcType=JdbcType.INTEGER),
        @Result(column="service_type", property="serviceType", jdbcType=JdbcType.INTEGER),
        @Result(column="buy_id", property="buyId", jdbcType=JdbcType.INTEGER),
        @Result(column="buy_name", property="buyName", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_address", property="buyAddress", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_phone", property="buyPhone", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_food_type", property="buyFoodType", jdbcType=JdbcType.INTEGER),
        @Result(column="buy_food_price", property="buyFoodPrice", jdbcType=JdbcType.DOUBLE),
        @Result(column="buy_food_num", property="buyFoodNum", jdbcType=JdbcType.DOUBLE),
        @Result(column="buy_food_require", property="buyFoodRequire", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_location_s", property="buyLocationS", jdbcType=JdbcType.INTEGER),
        @Result(column="buy_location_desc_s", property="buyLocationDescS", jdbcType=JdbcType.VARCHAR),
        @Result(column="buy_location", property="buyLocation", jdbcType=JdbcType.INTEGER),
        @Result(column="buy_location_desc", property="buyLocationDesc", jdbcType=JdbcType.VARCHAR),
        @Result(column="check_status", property="checkStatus", jdbcType=JdbcType.INTEGER),
        @Result(column="check_user_id", property="checkUserId", jdbcType=JdbcType.INTEGER),
        @Result(column="check_user_name", property="checkUserName", jdbcType=JdbcType.VARCHAR),
        @Result(column="check_user_time", property="checkUserTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="check_client_status", property="checkClientStatus", jdbcType=JdbcType.INTEGER),
        @Result(column="check_client_id", property="checkClientId", jdbcType=JdbcType.INTEGER),
        @Result(column="check_client_name", property="checkClientName", jdbcType=JdbcType.VARCHAR),
        @Result(column="check_client_time", property="checkClientTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="check_client_remark", property="checkClientRemark", jdbcType=JdbcType.VARCHAR),
        @Result(column="trader_id", property="traderId", jdbcType=JdbcType.INTEGER),
        @Result(column="trader_name", property="traderName", jdbcType=JdbcType.VARCHAR),
        @Result(column="trader_phone", property="traderPhone", jdbcType=JdbcType.VARCHAR),
        @Result(column="apply_allocation", property="applyAllocation", jdbcType=JdbcType.INTEGER),
        @Result(column="reality_buy_price_type", property="realityBuyPriceType", jdbcType=JdbcType.INTEGER),
        @Result(column="reality_sell_price_type", property="realitySellPriceType", jdbcType=JdbcType.INTEGER),
        @Result(column="reality_buy_price", property="realityBuyPrice", jdbcType=JdbcType.DOUBLE),
        @Result(column="reality_sell_price", property="realitySellPrice", jdbcType=JdbcType.DOUBLE),
        @Result(column="reality_buy_pay_method", property="realityBuyPayMethod", jdbcType=JdbcType.INTEGER),
        @Result(column="reality_sell_pay_method", property="realitySellPayMethod", jdbcType=JdbcType.INTEGER),
        @Result(column="reality_buy_require", property="realityBuyRequire", jdbcType=JdbcType.VARCHAR),
        @Result(column="reality_sell_require", property="realitySellRequire", jdbcType=JdbcType.VARCHAR),
        @Result(column="reality_logistics_info", property="realityLogisticsInfo", jdbcType=JdbcType.VARCHAR),
        @Result(column="abandon_reason_code", property="abandonReasonCode", jdbcType=JdbcType.INTEGER),
        @Result(column="abandon_reason", property="abandonReason", jdbcType=JdbcType.VARCHAR),
        @Result(column="match_goods_id", property="matchGoodsId", jdbcType=JdbcType.INTEGER),
        @Result(column="view_count", property="viewCount", jdbcType=JdbcType.INTEGER),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="modify_time", property="modifyTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="from_type", property="fromType", jdbcType=JdbcType.INTEGER),
        @Result(column="complete_time", property="completeTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="create_userid", property="createUserid", jdbcType=JdbcType.INTEGER),
        @Result(column="create_username", property="createUsername", jdbcType=JdbcType.VARCHAR),
        @Result(column="auth_status", property="authStatus", jdbcType=JdbcType.INTEGER),
        @Result(column="has_logistics", property="hasLogistics", jdbcType=JdbcType.INTEGER),
        @Result(column="grain_level", property="grainLevel", jdbcType=JdbcType.INTEGER),
        @Result(column="category", property="category", jdbcType=JdbcType.INTEGER),
        @Result(column="remark", property="remark", jdbcType=JdbcType.VARCHAR),
        @Result(column="address", property="address", jdbcType=JdbcType.VARCHAR),
        @Result(column="column1", property="column1", jdbcType=JdbcType.VARCHAR),
        @Result(column="column2", property="column2", jdbcType=JdbcType.VARCHAR)
    })
    BsUserRequire selectByPrimaryKey(BsUserRequireKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require
     *
     * @mbggenerated Fri Feb 24 18:06:23 CST 2017
     */
    @UpdateProvider(type=BsUserRequireSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") BsUserRequire record, @Param("example") BsUserRequireExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require
     *
     * @mbggenerated Fri Feb 24 18:06:23 CST 2017
     */
    @UpdateProvider(type=BsUserRequireSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") BsUserRequire record, @Param("example") BsUserRequireExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require
     *
     * @mbggenerated Fri Feb 24 18:06:23 CST 2017
     */
    @UpdateProvider(type=BsUserRequireSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(BsUserRequire record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_user_require
     *
     * @mbggenerated Fri Feb 24 18:06:23 CST 2017
     */
    @Update({
        "update bs_user_require",
        "set process_status = #{processStatus,jdbcType=INTEGER},",
          "service_type = #{serviceType,jdbcType=INTEGER},",
          "buy_id = #{buyId,jdbcType=INTEGER},",
          "buy_name = #{buyName,jdbcType=VARCHAR},",
          "buy_address = #{buyAddress,jdbcType=VARCHAR},",
          "buy_phone = #{buyPhone,jdbcType=VARCHAR},",
          "buy_food_type = #{buyFoodType,jdbcType=INTEGER},",
          "buy_food_price = #{buyFoodPrice,jdbcType=DOUBLE},",
          "buy_food_num = #{buyFoodNum,jdbcType=DOUBLE},",
          "buy_food_require = #{buyFoodRequire,jdbcType=VARCHAR},",
          "buy_location_s = #{buyLocationS,jdbcType=INTEGER},",
          "buy_location_desc_s = #{buyLocationDescS,jdbcType=VARCHAR},",
          "buy_location = #{buyLocation,jdbcType=INTEGER},",
          "buy_location_desc = #{buyLocationDesc,jdbcType=VARCHAR},",
          "check_status = #{checkStatus,jdbcType=INTEGER},",
          "check_user_id = #{checkUserId,jdbcType=INTEGER},",
          "check_user_name = #{checkUserName,jdbcType=VARCHAR},",
          "check_user_time = #{checkUserTime,jdbcType=TIMESTAMP},",
          "check_client_status = #{checkClientStatus,jdbcType=INTEGER},",
          "check_client_id = #{checkClientId,jdbcType=INTEGER},",
          "check_client_name = #{checkClientName,jdbcType=VARCHAR},",
          "check_client_time = #{checkClientTime,jdbcType=TIMESTAMP},",
          "check_client_remark = #{checkClientRemark,jdbcType=VARCHAR},",
          "trader_id = #{traderId,jdbcType=INTEGER},",
          "trader_name = #{traderName,jdbcType=VARCHAR},",
          "trader_phone = #{traderPhone,jdbcType=VARCHAR},",
          "apply_allocation = #{applyAllocation,jdbcType=INTEGER},",
          "reality_buy_price_type = #{realityBuyPriceType,jdbcType=INTEGER},",
          "reality_sell_price_type = #{realitySellPriceType,jdbcType=INTEGER},",
          "reality_buy_price = #{realityBuyPrice,jdbcType=DOUBLE},",
          "reality_sell_price = #{realitySellPrice,jdbcType=DOUBLE},",
          "reality_buy_pay_method = #{realityBuyPayMethod,jdbcType=INTEGER},",
          "reality_sell_pay_method = #{realitySellPayMethod,jdbcType=INTEGER},",
          "reality_buy_require = #{realityBuyRequire,jdbcType=VARCHAR},",
          "reality_sell_require = #{realitySellRequire,jdbcType=VARCHAR},",
          "reality_logistics_info = #{realityLogisticsInfo,jdbcType=VARCHAR},",
          "abandon_reason_code = #{abandonReasonCode,jdbcType=INTEGER},",
          "abandon_reason = #{abandonReason,jdbcType=VARCHAR},",
          "match_goods_id = #{matchGoodsId,jdbcType=INTEGER},",
          "view_count = #{viewCount,jdbcType=INTEGER},",
          "create_time = #{createTime,jdbcType=TIMESTAMP},",
          "modify_time = #{modifyTime,jdbcType=TIMESTAMP},",
          "from_type = #{fromType,jdbcType=INTEGER},",
          "complete_time = #{completeTime,jdbcType=TIMESTAMP},",
          "create_userid = #{createUserid,jdbcType=INTEGER},",
          "create_username = #{createUsername,jdbcType=VARCHAR},",
          "auth_status = #{authStatus,jdbcType=INTEGER},",
          "has_logistics = #{hasLogistics,jdbcType=INTEGER},",
          "grain_level = #{grainLevel,jdbcType=INTEGER},",
          "category = #{category,jdbcType=INTEGER},",
          "remark = #{remark,jdbcType=VARCHAR},",
          "address = #{address,jdbcType=VARCHAR},",
          "column1 = #{column1,jdbcType=VARCHAR},",
          "column2 = #{column2,jdbcType=VARCHAR}",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(BsUserRequire record);
}
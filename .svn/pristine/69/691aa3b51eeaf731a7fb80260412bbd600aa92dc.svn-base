package lb.rest.user.web.action;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import lb.rest.user.db.dao.BsUserCommentDao;
import lb.rest.user.db.entity.BsUserComment;
import lb.rest.user.db.entity.BsUserCommentExample;
import lb.rest.user.db.entity.BsUserCommentKey;
import lb.rest.user.db.entity.Mlbuser;
import lb.rest.user.db.entity.MlbuserAddition;
import lb.rest.user.db.entity.MlbuserAdditionKey;
import lb.rest.user.db.mapper.BsUserCommentMapper;
import lb.rest.user.db.mapper.MlbuserAdditionMapper;
import lb.rest.user.db.mapper.MlbuserMapper;
import lombok.extern.slf4j.Slf4j;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.lang.math.NumberUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mlb.enums.IndustryEnum;
import com.mlb.util.JsonDataUtils;
import com.mlb.util.SequenceUtil;
import com.mlb.util.SessionUtils;

import fc.wpf.rest.db.service.DataService;
import fc.wpf.rest.utils.BeanFactory;
import fc.wpf.rest.utils.DBBean;
import fc.wpf.rest.utils.DateStyle;
import fc.wpf.rest.utils.DateUtil;
import fc.wpf.rest.web.action.BasicCtrl;
import fc.wpf.rest.web.bean.DbCondi;
import fc.wpf.rest.web.bean.ReturnInfo;
import fc.wpf.rest.web.bean.SqlMaker;
import fc.wpf.rest.web.bind.FieldUtils;

@Slf4j
@Controller
@RequestMapping("/bsusercomment")
public class BsUserCommentCtrl extends BasicCtrl {

	private static BsUserCommentMapper bsUserCommentMapper = (BsUserCommentMapper) BeanFactory
			.getBean("bsUserCommentMapper");
	private static BsUserCommentDao bsUserCommentDao = (BsUserCommentDao) BeanFactory.getBean("bsUserCommentDao");
	private static MlbuserMapper mlbuserMapper = (MlbuserMapper) BeanFactory.getBean("mlbuserMapper");
	private static MlbuserAdditionMapper mlbuserAdditionMapper = (MlbuserAdditionMapper) BeanFactory
			.getBean("mlbuserAdditionMapper");

	private static DataService mysqlDataService = (DataService) BeanFactory.getBean("mysqlDataService");

	/**
	 * ajax单条数据插入 url:'http://ip/rest/BsUserComment'
	 * data:'{"key1":"value1","key2":"value2",...}' type:’POST
	 */
	@RequestMapping(value = "", method = RequestMethod.POST)
	@ResponseBody
	public ReturnInfo insert(BsUserComment info, HttpServletRequest req) {
		try {
			int userId = NumberUtils.toInt(req.getParameter("userId"));
			if (userId > 0) {
				int objId = SequenceUtil.getInstance().nextValue("bs_user_comment");
				info.setId(objId);
				info.setCommentTime(new Date());
				int flag = bsUserCommentMapper.insertSelective(info);
				if (flag > 0) {
					return new ReturnInfo("成功", objId, null, true);
				}
			}
		} catch (Exception e) {
			log.warn("BsUserCommentCtrl insert error..", e);
			// e.printStackTrace();
		}
		return new ReturnInfo("失败", -1, null, false);
	}

	/**
	 * ajax根据ID主键查询 请求 url: 'http://ip/app/BsUserComment/(_id值)' dataType:
	 * 'json' type: 'get'
	 */
	@RequestMapping(value = "/{key}", method = RequestMethod.GET)
	@ResponseBody
	public BsUserComment get(@PathVariable String key, HttpServletRequest req) {
		BsUserComment obj = null;
		try {
			BsUserComment akey = new BsUserComment();

			Field keyField = FieldUtils.allDeclaredField(BsUserCommentKey.class).get(0);

			if (keyField.getType().isInstance(1)) {
				FieldUtils.setObjectValue(akey, keyField, Integer.parseInt(key));
			} else if (keyField.getType().isInstance(1L)) {
				FieldUtils.setObjectValue(akey, keyField, Long.parseLong(key));
			} else {
				FieldUtils.setObjectValue(akey, keyField, key);
			}

			if (true && akey.getId() == null) {
			} else {
				BsUserCommentExample example = new BsUserCommentExample();
				example.createCriteria().andIdEqualTo(akey.getId());
				List<BsUserComment> list = bsUserCommentMapper.selectByExample(example);
				if (list != null && list.size() > 0) {
					obj = list.get(0);
				}
			}
		} catch (Exception e) {
			log.warn("BsUserCommentCtrl get by key error..", e);
		}
		return obj;
	}

	/**
	 * ajax根据主键删除 url:'http://ip/app/BsUserComment/(_id值)' type: 'DELETE'
	 * dataType: 'json'
	 */
	@RequestMapping(value = "/{key}", method = RequestMethod.DELETE)
	@ResponseBody
	public ReturnInfo delete(@PathVariable String key, HttpServletRequest req) {
		try {
			BsUserComment akey = new BsUserComment();

			Field keyField = FieldUtils.allDeclaredField(BsUserCommentKey.class).get(0);

			if (keyField.getType().isInstance(1)) {
				FieldUtils.setObjectValue(akey, keyField, Integer.parseInt(key));
			} else if (keyField.getType().isInstance(1L)) {
				FieldUtils.setObjectValue(akey, keyField, Long.parseLong(key));
			} else {
				FieldUtils.setObjectValue(akey, keyField, key);
			}

			if (true && akey.getId() != null) {
				bsUserCommentMapper.deleteByPrimaryKey(akey);
				return ReturnInfo.Success;
			}
		} catch (Exception e) {
			log.warn("BsUserCommentCtrl delete by key error..");
		}
		return ReturnInfo.Faild;
	}

	/**
	 * ajax根据主键单条修改 url:'http://ip/app/BsUserComment/(_id值)'
	 * data:'{"key1":"value1","key2":"value2",...}' type:'PUT'
	 */
	@RequestMapping(value = "/{key}", method = RequestMethod.POST)
	@ResponseBody
	public ReturnInfo update(@PathVariable String key, BsUserComment info, HttpServletRequest req) {
		try {
			if (info != null) {
				BsUserComment akey = new BsUserComment();

				Field keyField = FieldUtils.allDeclaredField(BsUserCommentKey.class).get(0);

				if (keyField.getType().isInstance(1)) {
					FieldUtils.setObjectValue(akey, keyField, Integer.parseInt(key));
				} else if (keyField.getType().isInstance(1L)) {
					FieldUtils.setObjectValue(akey, keyField, Long.parseLong(key));
				} else {
					FieldUtils.setObjectValue(akey, keyField, key);
				}
				BsUserCommentExample example = new BsUserCommentExample();
				example.createCriteria().andIdEqualTo(akey.getId());
				info.setCommentTime(new Date());
				bsUserCommentMapper.updateByExampleSelective(info, example);
			}
			return ReturnInfo.Success;
		} catch (Exception e) {
			log.warn("BsUserComment update by key error..");
		}
		return ReturnInfo.Faild;
	}

	/***
	 * 用户能看到的粮库列表
	 * 
	 * @param req
	 * @return
	 */
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	@ResponseBody
	public Object getList(HttpServletRequest req) {
		int userId = SessionUtils.getMlbUserId(req);
		int type = NumberUtils.toInt(req.getParameter("type"));
		List<BsUserComment> list = null;
		// type:1 good / type:2 middle / type = 3 bad//
		list = bsUserCommentDao.getList(userId);

		boolean success = false;
		JsonDataUtils json = new JsonDataUtils();
		JSONObject jsonObj = new JSONObject();
		if (list != null && list.size() > 0) {
			success = true;
			int number = 1;
			success = true;
			// json.addTitle("number", "id", "userName", "content",
			// "commentTime", "level");
			if (list != null) {
				int total = list.size();
				int goodLevel = 0;
				int middleLevel = 0;
				int badLevel = 0;
				String currentLevel = "";
				for (BsUserComment item : list) {
					int level = item.getCommentLevel() != null ? item.getCommentLevel() : 0;

					if (level > 3) {
						goodLevel++;
						currentLevel = "good";
					} else if (level == 3 || level == 2) {
						middleLevel++;
						currentLevel = "middle";
					} else if (level == 1) {
						badLevel++;
						currentLevel = "bad";
					}
					Date commentDate = item.getCommentTime();

					String formattedDate = "";
					if (commentDate != null) {
						formattedDate = DateUtil.format(commentDate, DateStyle.YYYY_MM_DD_HH_MM);
					}
					int objUserId = item.getCommentatorId();
					MlbuserAdditionKey additionKey = new MlbuserAdditionKey();
					additionKey.setUserId(objUserId);
					MlbuserAddition additionItem = mlbuserAdditionMapper.selectByPrimaryKey(additionKey);
					if (additionItem != null) {
						int industry = additionItem.getIndustry() == null ? 0 : additionItem.getIndustry();
						String industryName = IndustryEnum.getName(industry);
					}
					Mlbuser userKey = new Mlbuser();
					userKey.setUserid(objUserId);
					Mlbuser mlbuserItem = mlbuserMapper.selectByPrimaryKey(userKey);
					String company = "";
					String userName = "";
					String companyAuthStr = "否";
					String personalAuthStr = "否";
					int companyAuth = 2;
					int personalAuth = 2;
					if (mlbuserItem.getCompanyAuth() != null && mlbuserItem.getCompanyAuth() > 0) {
						companyAuth = mlbuserItem.getCompanyAuth();
					}
					if (mlbuserItem.getPersonalAuth() != null && mlbuserItem.getPersonalAuth() > 0) {
						personalAuth = mlbuserItem.getPersonalAuth();
					}
					if (companyAuth == 1) {
						companyAuthStr = "是";
					}
					if (personalAuth == 1) {
						personalAuthStr = "是";
					}

					if (mlbuserItem != null) {
						company = mlbuserItem.getCompanyname();
						userName = mlbuserItem.getTruename();
					}
					// 好评：4、5星 中评 2、3 差评 1
					if (type <= 0) {
						json.addOneRow(number++, item.getId(), userName, item.getContent(), formattedDate, company,
								level, currentLevel);
					} else if (type == 1) {
						if (level > 3) {
							json.addOneRow(number++, item.getId(), userName, item.getContent(), formattedDate, company,
									level, currentLevel);
						}
					} else if (type == 2) {
						if (level == 3 || level == 2) {
							json.addOneRow(number++, item.getId(), userName, item.getContent(), formattedDate, company,
									level, currentLevel);
						}
					} else if (type == 3) {
						if (level == 1) {
							json.addOneRow(number++, item.getId(), userName, item.getContent(), formattedDate, company,
									level, currentLevel);
						}
					}
				}
				json.addTitle("number", "id", "userName", "content", "commentTime", "companyName", "level", "levelStr");

				jsonObj.put("total", total);
				jsonObj.put("good", goodLevel);
				jsonObj.put("middle", middleLevel);
				jsonObj.put("bad", badLevel);
				json.setJsonObj(jsonObj);
			}
		}
		json.setSuccess(success);
		return json.toJsonObj();
	}

	@RequestMapping(value = "/getItems", method = RequestMethod.POST)
	@ResponseBody
	public Object getItems(HttpServletRequest req) {
		int userId = SessionUtils.getMlbUserId(req);
		List<BsUserComment> list = bsUserCommentDao.getList(userId);
		JSONArray jsonlist = new JSONArray();
		if (list != null && list.size() > 0) {
			for (BsUserComment item : list) {
				JSONObject obj = new JSONObject();
				obj.put("id", item.getId());
				obj.put("name", item.getRemark());
				jsonlist.add(obj);
			}
		}
		return jsonlist;
	}

	private void setTableName(DbCondi dc) {
		String tName = DBBean.getTableName2Class(BsUserComment.class);
		if (dc.getOther() == null) {
			Map<String, Object> o = new HashMap<String, Object>();
			o.put(SqlMaker.TABLE_NAME, tName);
			dc.setOther(o);
		} else {
			dc.getOther().put(SqlMaker.TABLE_NAME, tName);
		}
	}

	@SuppressWarnings("serial")
	public static class BsUserComments extends ArrayList<BsUserComment> {
		public BsUserComments() {
			super();
		}
	}
}
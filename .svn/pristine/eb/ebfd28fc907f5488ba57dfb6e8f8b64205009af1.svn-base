package lb.rest.user.web.action;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import lb.rest.user.db.dao.BsClickCountDao;
import lb.rest.user.db.dao.CommonDao;
import lb.rest.user.db.entity.BsClickCount;
import lb.rest.user.db.entity.BsClickCountExample;
import lb.rest.user.db.entity.BsClickCountKey;
import lb.rest.user.db.entity.Mlbuser;
import lb.rest.user.db.entity.MlbuserAddition;
import lb.rest.user.db.entity.MlbuserAdditionKey;
import lb.rest.user.db.mapper.BsClickCountMapper;
import lb.rest.user.db.mapper.MlbuserAdditionMapper;
import lb.rest.user.db.mapper.MlbuserMapper;
import lombok.extern.slf4j.Slf4j;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.lang.math.NumberUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mlb.bo.UserClickCountBO;
import com.mlb.enums.IndustryEnum;
import com.mlb.util.JsonDataUtils;
import com.mlb.util.SequenceUtil;
import com.mlb.util.SessionUtils;

import fc.wpf.rest.db.service.DataService;
import fc.wpf.rest.utils.BeanFactory;
import fc.wpf.rest.utils.DBBean;
import fc.wpf.rest.web.action.BasicCtrl;
import fc.wpf.rest.web.bean.DbCondi;
import fc.wpf.rest.web.bean.ReturnInfo;
import fc.wpf.rest.web.bean.SqlMaker;
import fc.wpf.rest.web.bind.FieldUtils;

@Slf4j
@Controller
@RequestMapping("/bsclickcount")
public class BsClickCountCtrl extends BasicCtrl {

	private static BsClickCountMapper bsClickCountMapper = (BsClickCountMapper) BeanFactory
			.getBean("bsClickCountMapper");
	private static BsClickCountDao bsClickCountDao = (BsClickCountDao) BeanFactory.getBean("bsClickCountDao");
	private static CommonDao commonDao = (CommonDao) BeanFactory.getBean("commonDao");
	private static MlbuserMapper mlbuserMapper = (MlbuserMapper) BeanFactory.getBean("mlbuserMapper");
	private static MlbuserAdditionMapper mlbuserAdditionMapper = (MlbuserAdditionMapper) BeanFactory
			.getBean("mlbuserAdditionMapper");

	private static DataService mysqlDataService = (DataService) BeanFactory.getBean("mysqlDataService");

	/**
	 * ajax单条数据插入 url:'http://ip/rest/bsclickcount'
	 * data:'{"key1":"value1","key2":"value2",...}' type:’POST
	 */
	@RequestMapping(value = "", method = RequestMethod.POST)
	@ResponseBody
	public ReturnInfo insert(BsClickCount info, HttpServletRequest req) {
		try {
			int targetId = NumberUtils.toInt(req.getParameter("targetId"));
			int targetType = NumberUtils.toInt(req.getParameter("targetType"), 1); // 卖粮宝用户ID
			if (targetId > 0) {
				int objId = SequenceUtil.getInstance().nextValue("bs_click_count");
				info.setId(objId);
				info.setOperateTime(new Date());
				info.setTargetType(targetType);

				int flag = bsClickCountMapper.insertSelective(info);
				if (flag > 0) {
					return ReturnInfo.Success;
				}
			}
		} catch (Exception e) {
			log.warn("BsClickCountCtrl insert error..", e);
			// e.printStackTrace();
		}
		return ReturnInfo.Faild;
	}

	/**
	 * ajax根据ID主键查询 请求 url: 'http://ip/app/bsclickcount/(_id值)' dataType: 'json'
	 * type: 'get'
	 */
	@RequestMapping(value = "/{key}", method = RequestMethod.GET)
	@ResponseBody
	public BsClickCount get(@PathVariable String key, HttpServletRequest req) {
		BsClickCount obj = null;
		try {
			BsClickCount akey = new BsClickCount();

			Field keyField = FieldUtils.allDeclaredField(BsClickCountKey.class).get(0);

			if (keyField.getType().isInstance(1)) {
				FieldUtils.setObjectValue(akey, keyField, Integer.parseInt(key));
			} else if (keyField.getType().isInstance(1L)) {
				FieldUtils.setObjectValue(akey, keyField, Long.parseLong(key));
			} else {
				FieldUtils.setObjectValue(akey, keyField, key);
			}

			if (true && akey.getId() == null) {
			} else {
				BsClickCountExample example = new BsClickCountExample();
				example.createCriteria().andIdEqualTo(akey.getId());
				List<BsClickCount> list = bsClickCountMapper.selectByExample(example);
				if (list != null && list.size() > 0) {
					obj = list.get(0);
				}
			}
		} catch (Exception e) {
			log.warn("BsClickCountCtrl get by key error..", e);
		}
		return obj;
	}

	/**
	 * ajax根据主键删除 url:'http://ip/app/bsclickcount/(_id值)' type: 'DELETE'
	 * dataType: 'json'
	 */
	@RequestMapping(value = "/{key}", method = RequestMethod.DELETE)
	@ResponseBody
	public ReturnInfo delete(@PathVariable String key, HttpServletRequest req) {
		try {
			BsClickCount akey = new BsClickCount();

			Field keyField = FieldUtils.allDeclaredField(BsClickCountKey.class).get(0);

			if (keyField.getType().isInstance(1)) {
				FieldUtils.setObjectValue(akey, keyField, Integer.parseInt(key));
			} else if (keyField.getType().isInstance(1L)) {
				FieldUtils.setObjectValue(akey, keyField, Long.parseLong(key));
			} else {
				FieldUtils.setObjectValue(akey, keyField, key);
			}

			if (true && akey.getId() != null) {
				bsClickCountMapper.deleteByPrimaryKey(akey);
				return ReturnInfo.Success;
			}
		} catch (Exception e) {
			log.warn("BsClickCountCtrl delete by key error..");
		}
		return ReturnInfo.Faild;
	}

	/**
	 * ajax根据主键单条修改 url:'http://ip/app/bsclickcount/(_id值)'
	 * data:'{"key1":"value1","key2":"value2",...}' type:'PUT'
	 */
	@RequestMapping(value = "/{key}", method = RequestMethod.POST)
	@ResponseBody
	public ReturnInfo update(@PathVariable String key, BsClickCount info, HttpServletRequest req) {
		try {
			if (info != null) {
				BsClickCount akey = new BsClickCount();

				Field keyField = FieldUtils.allDeclaredField(BsClickCountKey.class).get(0);

				if (keyField.getType().isInstance(1)) {
					FieldUtils.setObjectValue(akey, keyField, Integer.parseInt(key));
				} else if (keyField.getType().isInstance(1L)) {
					FieldUtils.setObjectValue(akey, keyField, Long.parseLong(key));
				} else {
					FieldUtils.setObjectValue(akey, keyField, key);
				}
				BsClickCountExample example = new BsClickCountExample();
				example.createCriteria().andIdEqualTo(akey.getId());
				info.setOperateTime(new Date());
				bsClickCountMapper.updateByExampleSelective(info, example);
			}
			return ReturnInfo.Success;
		} catch (Exception e) {
			log.warn("BsClickCount update by key error..");
		}
		return ReturnInfo.Faild;
	}

	/***
	 * 用户能看到的粮库列表
	 * 
	 * @param req
	 * @return
	 */
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	@ResponseBody
	public Object getList(HttpServletRequest req) {
		int userId = SessionUtils.getMlbUserId(req);
		int type = NumberUtils.toInt(req.getParameter("type"));
		List<BsClickCount> list = null;
		if (type == 1) {
			list = bsClickCountDao.getList(userId);
		} else if (type == 2) {
			list = bsClickCountDao.getList(userId);
		}
		boolean success = false;
		JsonDataUtils json = new JsonDataUtils();
		if (list != null && list.size() > 0) {
			success = true;
			int number = 1;
			success = true;
			json.addTitle("number", "id", "userName", "industryName", "companyName", "authen");
			if (list != null) {
				for (BsClickCount item : list) {
					// String formattedDate =
					// DateUtil.format(item.getCreateTime(),
					// DateStyle.YYYY_MM_DD_HH_MM_SS);
					int objUserId = item.getTargetId();
					MlbuserAdditionKey additionKey = new MlbuserAdditionKey();
					additionKey.setUserId(objUserId);
					MlbuserAddition additionItem = mlbuserAdditionMapper.selectByPrimaryKey(additionKey);
					int industry = additionItem.getIndustry() == null ? 0 : additionItem.getIndustry();
					String industryName = IndustryEnum.getName(industry);
					Mlbuser userKey = new Mlbuser();
					userKey.setUserid(objUserId);
					Mlbuser mlbuserItem = mlbuserMapper.selectByPrimaryKey(userKey);
					String company = "";
					String userName = "";
					String companyAuthStr = "否";
					String personalAuthStr = "否";
					int companyAuth = 2;
					int personalAuth = 2;
					if (mlbuserItem.getCompanyAuth() != null && mlbuserItem.getCompanyAuth() > 0) {
						companyAuth = mlbuserItem.getCompanyAuth();
					}
					if (mlbuserItem.getPersonalAuth() != null && mlbuserItem.getPersonalAuth() > 0) {
						personalAuth = mlbuserItem.getPersonalAuth();
					}
					if (companyAuth == 1) {
						companyAuthStr = "是";
					}
					if (personalAuth == 1) {
						personalAuthStr = "是";
					}

					if (mlbuserItem != null) {
						company = mlbuserItem.getCompanyname();
						userName = mlbuserItem.getTruename();
					}
					json.addOneRow(number++, item.getId(), userName, industryName, company, item.getRemark());
				}
			}
		}
		json.setSuccess(success);
		return json.toJsonObj();
	}

	@RequestMapping(value = "/getItems", method = RequestMethod.POST)
	@ResponseBody
	public Object getItems(HttpServletRequest req) {
		int userId = SessionUtils.getMlbUserId(req);
		List<BsClickCount> list = bsClickCountDao.getList(userId);
		JSONArray jsonlist = new JSONArray();
		if (list != null && list.size() > 0) {
			for (BsClickCount item : list) {
				JSONObject obj = new JSONObject();
				obj.put("id", item.getId());
				obj.put("name", item.getRemark());
				jsonlist.add(obj);
			}
		}
		return jsonlist;
	}

	@RequestMapping(value = "/getClickCount", method = RequestMethod.POST)
	@ResponseBody
	public Object getClickCount(HttpServletRequest req) {
		int userId = SessionUtils.getMlbUserId(req);
		UserClickCountBO list = commonDao.getUserClickCount(userId);
		return list;
	}

	private void setTableName(DbCondi dc) {
		String tName = DBBean.getTableName2Class(BsClickCount.class);
		if (dc.getOther() == null) {
			Map<String, Object> o = new HashMap<String, Object>();
			o.put(SqlMaker.TABLE_NAME, tName);
			dc.setOther(o);
		} else {
			dc.getOther().put(SqlMaker.TABLE_NAME, tName);
		}
	}

	@SuppressWarnings("serial")
	public static class BsClickCounts extends ArrayList<BsClickCount> {
		public BsClickCounts() {
			super();
		}
	}
}
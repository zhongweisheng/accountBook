package lb.rest.user.web.action;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import lb.rest.user.db.dao.BsInventoryDepotDao;
import lb.rest.user.db.dao.BsInventoryStorageTempDao;
import lb.rest.user.db.dao.BsSequenceDao;
import lb.rest.user.db.entity.BsInventoryStaff;
import lb.rest.user.db.entity.BsInventoryStorageTemp;
import lb.rest.user.db.entity.BsInventoryStorageTempExample;
import lb.rest.user.db.entity.BsInventoryStorageTempExample.Criteria;
import lb.rest.user.db.entity.BsInventoryStorageTempKey;
import lb.rest.user.db.mapper.BsInventoryStaffMapper;
import lb.rest.user.db.mapper.BsInventoryStorageTempMapper;
import lombok.extern.slf4j.Slf4j;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.math.NumberUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mlb.enums.StaffTypeEnum;
import com.mlb.util.GetParamsUtils;
import com.mlb.util.SequenceUtil;
import com.mlb.util.SessionUtils;

import fc.wpf.rest.db.service.DataService;
import fc.wpf.rest.utils.BeanFactory;
import fc.wpf.rest.utils.DBBean;
import fc.wpf.rest.utils.DateStyle;
import fc.wpf.rest.utils.DateUtil;
import fc.wpf.rest.web.action.BasicCtrl;
import fc.wpf.rest.web.bean.DbCondi;
import fc.wpf.rest.web.bean.ReturnInfo;
import fc.wpf.rest.web.bean.SqlMaker;
import fc.wpf.rest.web.bind.FieldUtils;

@Slf4j
@Controller
@RequestMapping("/bsInventoryStorageTemp")
public class BsInventoryStorageTempCtrl extends BasicCtrl {

	private static BsInventoryStorageTempMapper bsInventoryStorageTempMapper = (BsInventoryStorageTempMapper) BeanFactory
			.getBean("bsInventoryStorageTempMapper");

	private static DataService mysqlDataService = (DataService) BeanFactory.getBean("mysqlDataService");

	private static BsInventoryStaffMapper bsInventoryStaffMapper = (BsInventoryStaffMapper) BeanFactory
			.getBean("bsInventoryStaffMapper");

	private BsSequenceDao bsSequenceDao = (BsSequenceDao) BeanFactory.getBean("bsSequenceDao");

	private static BsInventoryStorageTempDao bsInventoryStorageTempDao = (BsInventoryStorageTempDao) BeanFactory
			.getBean("bsInventoryStorageTempDao");

	@Resource
	private BsInventoryDepotDao bsInventoryDepotDao = (BsInventoryDepotDao) BeanFactory.getBean("bsInventoryDepotDao");

	@RequestMapping(value = "insert", method = RequestMethod.POST)
	@ResponseBody
	public ReturnInfo insert(BsInventoryStorageTemp info, HttpServletRequest req) {
		try {

			int depotId = info.getDepotId() == null ? 0 : info.getDepotId();
			int id = SequenceUtil.getInstance().nextValue("bs_inventory_storage");
			info.setId(id);
			info.setCreateTime(new Date());
			info.setRecordNumber(bsSequenceDao.nextValue(depotId, info.getUserId(), info.getGrainType(),
					info.getRecordType())
					+ "");
			info.setIfPayment(0);
			String dateTime = info.getDate() + " " + "00:00:00";
			info.setRecordTime(DateUtil.getDate(DateStyle.YYYY_MM_DD_HH_MM_SS.getValue(), dateTime));
			if (info.getRecordType() == 1) {
				info.setShifuk(info.getMoneyIn());
			} else {
				info.setShifuk(info.getMoneyOut());
			}
			int flag = bsInventoryStorageTempMapper.insert(info);
			// 插入成功
			if (flag > 0) {
				int staffId = NumberUtils.toInt(req.getParameter("staffId"));

				int driverId = NumberUtils.toInt(req.getParameter("driverId"));
				// 新建司机
				if (driverId == -100) {
					String driverName = StringUtils.trimToEmpty(info.getDriverName());
					String driverPhone = StringUtils.trimToEmpty(req.getParameter("driverPhone"));
					if (driverName != null && !"".equals(driverName) && driverPhone != null && !"".equals(driverPhone)) {

						int staffType = StaffTypeEnum.司机.getCode();
						BsInventoryStaff record = new BsInventoryStaff();
						int userId = info.getUserId();
						record.setUserId(userId);
						record.setStaffType(staffType);
						record.setTrueName(driverName);
						record.setPhone(driverPhone);
						record.setIdCard("");
						record.setCardNumber("");
						record.setCreateTime(new Date());
						// 新建送粮人或买粮人
						int staffIdNew = SequenceUtil.getInstance().nextValue("bs_inventory_staff");
						record.setId(staffIdNew);
						bsInventoryStaffMapper.insertSelective(record);

						BsInventoryStorageTemp searchNewRecord = new BsInventoryStorageTemp();
						searchNewRecord.setId(id);
						searchNewRecord.setDriverId(staffIdNew);
						bsInventoryStorageTempMapper.updateByPrimaryKeySelective(searchNewRecord);
					}
				}
				// 新建 送粮人或买粮人
				if (staffId == -100) {
					String staffName = StringUtils.trimToEmpty(info.getStaffName());
					String staffPhone = StringUtils.trimToEmpty(req.getParameter("staffPhone"));
					if (staffName != null && !"".equals(staffName) && staffPhone != null && !"".equals(staffPhone)) {

						int recordType = info.getRecordType();
						// 入库单 为 送粮人；出库单为买粮人
						int staffType = StaffTypeEnum.送粮人.getCode();

						BsInventoryStaff record = new BsInventoryStaff();
						int userId = info.getUserId();
						record.setUserId(userId);
						record.setStaffType(staffType);
						record.setTrueName(staffName);
						record.setPhone(staffPhone);
						record.setIdCard("");
						record.setCardNumber("");
						record.setCreateTime(new Date());
						// 新建送粮人或买粮人
						int staffIdNew = SequenceUtil.getInstance().nextValue("bs_inventory_staff");
						record.setId(staffIdNew);
						bsInventoryStaffMapper.insertSelective(record);
						staffId = staffIdNew;
						// 新增送粮人或买粮人时，需要更新staffId , -100 更新为插入的staffIdNew
						BsInventoryStorageTemp searchNewRecord = new BsInventoryStorageTemp();
						searchNewRecord.setId(id);
						searchNewRecord.setStaffId(staffIdNew);
						bsInventoryStorageTempMapper.updateByPrimaryKeySelective(searchNewRecord);
					}
				}

				return new ReturnInfo("提交成功", id, info.getRecordNumber(), true);
			} else {
				return new ReturnInfo("提交失败", 0, 0, false);
			}

		} catch (Exception e) {
			log.warn("保存出入库 error..", e);
		}
		return ReturnInfo.Faild;
	}

	/**
	 * 修改更新
	 * 
	 * @param @param info
	 * @param @param req
	 * @param @return
	 * @return ReturnInfo
	 * @throws
	 * @date 2017年3月28日下午1:36:21
	 */
	@RequestMapping(value = "update", method = RequestMethod.POST)
	@ResponseBody
	public ReturnInfo update(BsInventoryStorageTemp info, HttpServletRequest req) {
		try {
			info.setUpdateTime(new Date());
			int flag = bsInventoryStorageTempMapper.updateByPrimaryKey(info);
			// 更新成功
			if (flag > 0) {
				int staffId = NumberUtils.toInt(req.getParameter("staffId"));
				int id = info.getId();

				int driverId = NumberUtils.toInt(req.getParameter("driverId"));
				// 新建司机
				if (driverId == -100) {
					String driverName = StringUtils.trimToEmpty(info.getDriverName());
					String driverPhone = StringUtils.trimToEmpty(req.getParameter("driverPhone"));
					if (driverName != null && !"".equals(driverName) && driverPhone != null && !"".equals(driverPhone)) {

						int staffType = StaffTypeEnum.司机.getCode();
						BsInventoryStaff record = new BsInventoryStaff();
						int userId = info.getUserId();
						record.setUserId(userId);
						record.setStaffType(staffType);
						record.setTrueName(driverName);
						record.setPhone(driverPhone);
						record.setIdCard("");
						record.setCardNumber("");
						record.setCreateTime(new Date());
						// 新建送粮人或买粮人
						int staffIdNew = SequenceUtil.getInstance().nextValue("bs_inventory_staff");
						record.setId(staffIdNew);
						bsInventoryStaffMapper.insertSelective(record);

						BsInventoryStorageTemp searchNewRecord = new BsInventoryStorageTemp();
						searchNewRecord.setId(id);
						searchNewRecord.setDriverId(staffIdNew);
						bsInventoryStorageTempMapper.updateByPrimaryKeySelective(searchNewRecord);
					}
				}

				// 新建 送粮人或买粮人
				if (staffId == -100) {
					String staffName = StringUtils.trimToEmpty(info.getStaffName());
					String staffPhone = StringUtils.trimToEmpty(req.getParameter("staffPhone"));
					if (staffName != null && !"".equals(staffName) && staffPhone != null && !"".equals(staffPhone)) {
						int recordType = info.getRecordType();
						// 入库单 为 送粮人；出库单为买粮人
						int staffType = StaffTypeEnum.送粮人.getCode();

						BsInventoryStaff record = new BsInventoryStaff();
						int userId = info.getUserId();
						record.setUserId(userId);
						record.setStaffType(staffType);
						record.setTrueName(staffName);
						record.setPhone(staffPhone);
						record.setIdCard("");
						record.setCardNumber("");
						record.setCreateTime(new Date());
						// 新建送粮人或买粮人
						int staffIdNew = SequenceUtil.getInstance().nextValue("bs_inventory_staff");
						record.setId(staffIdNew);
						bsInventoryStaffMapper.insertSelective(record);
						staffId = staffIdNew;
						// 新增送粮人或买粮人时，需要更新staffId , -100 更新为插入的staffIdNew
						BsInventoryStorageTemp searchNewRecord = new BsInventoryStorageTemp();
						searchNewRecord.setId(id);
						searchNewRecord.setStaffId(staffIdNew);
						bsInventoryStorageTempMapper.updateByPrimaryKeySelective(searchNewRecord);
					}
				}
				return ReturnInfo.Success;
			}

		} catch (Exception e) {
			log.warn("更新出入库记录 error..", e);
		}
		return ReturnInfo.Faild;
	}

	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ResponseBody
	public Object searchWxList(HttpServletRequest req) {
		int userId = SessionUtils.getMlbUserId(req);
		int ownerId = NumberUtils.toInt(req.getParameter("ownerId"), userId);
		int depotId = NumberUtils.toInt(req.getParameter("depotId"));
		int grainType = NumberUtils.toInt(req.getParameter("grainType"));
		int searchType = NumberUtils.toInt(req.getParameter("searchType"));
		int recordType = NumberUtils.toInt(req.getParameter("recordType"), 1);
		int staffId = NumberUtils.toInt(req.getParameter("staffId"), 0);
		String staffName = StringUtils.trimToEmpty(req.getParameter("staffName"));
		int wxList = NumberUtils.toInt(req.getParameter("wxList"), 1);
		int currentPage = NumberUtils.toInt(req.getParameter("currentPage"), 1);
		int pageSize = NumberUtils.toInt(req.getParameter("pageSize"), 10);
		int isPay = NumberUtils.toInt(req.getParameter("isPay"), 0);
		String recordNumber = StringUtils.trimToEmpty(req.getParameter("recordNumber"));
		String licensePlate = StringUtils.trimToEmpty(req.getParameter("licensePlate"));
		int driverId = NumberUtils.toInt(req.getParameter("driverId"));
		String strTime = StringUtils.trimToEmpty(req.getParameter("strTime"));
		String endTime = StringUtils.trimToEmpty(req.getParameter("endTime"));
		// Map<String, Object> map = GetParamsUtils.getParamMap(req);
		return bsInventoryStorageTempDao.searchList(false, ownerId, userId, grainType, recordType, searchType, staffId,
				staffName, isPay, recordNumber, licensePlate, driverId, strTime, endTime, depotId, currentPage,
				pageSize).toJsonObj();
	}

	/**
	 * ajax根据ID主键查询 请求 url: 'http://ip/app/BsInventoryStorageTemp/(_id值)'
	 * dataType: 'json' type: 'get'
	 */
	@RequestMapping(value = "/{key}", method = RequestMethod.GET)
	@ResponseBody
	public Object get(@PathVariable String key, HttpServletRequest req) {
		List<BsInventoryStorageTemp> list = null;
		BsInventoryStorageTemp obj = null;
		try {
			BsInventoryStorageTemp akey = new BsInventoryStorageTemp();

			Field keyField = FieldUtils.allDeclaredField(BsInventoryStorageTempKey.class).get(0);

			if (keyField.getType().isInstance(1)) {
				FieldUtils.setObjectValue(akey, keyField, Integer.parseInt(key));
			} else if (keyField.getType().isInstance(1L)) {
				FieldUtils.setObjectValue(akey, keyField, Long.parseLong(key));
			} else {
				FieldUtils.setObjectValue(akey, keyField, key);
			}

			if (true && akey.getId() == null) {
				list = new ArrayList<BsInventoryStorageTemp>();
			} else {
				BsInventoryStorageTempExample example = new BsInventoryStorageTempExample();
				example.createCriteria().andIdEqualTo(akey.getId());
				list = bsInventoryStorageTempMapper.selectByExample(example);

				if (list != null && list.size() > 0) {
					obj = list.get(0);
				}
			}
		} catch (Exception e) {
			log.warn("BsInventoryStorageTempCtrl get by key error..", e);
		}
		return obj;
	}

	/**
	 * ajax根据主键删除 url:'http://ip/app/BsInventoryStorageTemp/(_id值)' type:
	 * 'DELETE' dataType: 'json'
	 */
	@RequestMapping(value = "/{key}", method = RequestMethod.DELETE)
	@ResponseBody
	public ReturnInfo delete(@PathVariable String key, HttpServletRequest req) {
		try {
			BsInventoryStorageTemp akey = new BsInventoryStorageTemp();

			Field keyField = FieldUtils.allDeclaredField(BsInventoryStorageTempKey.class).get(0);

			if (keyField.getType().isInstance(1)) {
				FieldUtils.setObjectValue(akey, keyField, Integer.parseInt(key));
			} else if (keyField.getType().isInstance(1L)) {
				FieldUtils.setObjectValue(akey, keyField, Long.parseLong(key));
			} else {
				FieldUtils.setObjectValue(akey, keyField, key);
			}

			if (true && akey.getId() != null) {
				bsInventoryStorageTempMapper.deleteByPrimaryKey(akey);
				return ReturnInfo.Success;
			}
		} catch (Exception e) {
			log.warn("BsInventoryStorageTempCtrl delete by key error..");
		}
		return ReturnInfo.Faild;
	}

	/**
	 * 查询个数
	 * 
	 * @param @param req
	 * @param @return
	 * @return ReturnInfo
	 * @throws
	 * @date 2017年5月3日下午5:03:01
	 */
	@RequestMapping(value = "/queryCount", method = RequestMethod.POST)
	@ResponseBody
	public ReturnInfo queryCount(HttpServletRequest req) {
		Map<String, Object> maps = GetParamsUtils.getParamMap(req);
		int userId = NumberUtils.toInt(req.getParameter("userId"));
		int ownerId = NumberUtils.toInt(req.getParameter("ownerId"), 0);
		if (ownerId == 0) {
			ownerId = userId;
		}
		String recordType = maps.get("recordType").toString();
		BsInventoryStorageTempExample example = new BsInventoryStorageTempExample();
		Criteria criteria = example.createCriteria();
		criteria.andUserIdEqualTo(ownerId).andRecordTypeEqualTo(Integer.parseInt(recordType));
		// 通过userId ,获取他的粮库ID列表
		List<Integer> depotIdList = bsInventoryDepotDao.getIdList(userId);
		if (depotIdList != null && depotIdList.size() > 0) {
			criteria.andDepotIdIn(depotIdList);
		} else {
			criteria.andDepotIdEqualTo(0);
		}
		int list = bsInventoryStorageTempMapper.countByExample(example);
		return new ReturnInfo("成功", list, 0, true);
	}

	/**
	 * 删除
	 * 
	 * @param @param req
	 * @param @return
	 * @return ReturnInfo
	 * @throws
	 * @date 2017年4月2日下午4:22:14
	 */
	@RequestMapping(value = "/deleteInventoryTemporary", method = RequestMethod.POST)
	@ResponseBody
	public ReturnInfo deleteRecordOrdre(HttpServletRequest req) {
		Map<String, Object> maps = GetParamsUtils.getParamMap(req);
		String recordId = maps.get("temporaryId").toString();
		BsInventoryStorageTemp akey = new BsInventoryStorageTemp();
		akey.setId(Integer.parseInt(recordId));
		bsInventoryStorageTempMapper.deleteByPrimaryKey(akey);
		return new ReturnInfo("删除成功", 0, 0, true);
	}

	/**
	 * 更新是否已付款
	 * 
	 * @param @param req
	 * @param @return
	 * @return ReturnInfo
	 * @throws
	 * @date 2017年5月3日下午5:03:19
	 */
	@RequestMapping(value = "/updateIfPayment", method = RequestMethod.POST)
	@ResponseBody
	public ReturnInfo updateIfPayment(HttpServletRequest req) {
		try {
			BsInventoryStorageTemp record = new BsInventoryStorageTemp();
			int id = NumberUtils.toInt(req.getParameter("id"));
			int ifPayment = NumberUtils.toInt(req.getParameter("IfPayment"));
			if (id > 0) {
				record.setId(id);
				record.setIfPayment(ifPayment);
				bsInventoryStorageTempMapper.updateByPrimaryKeySelective(record);
			} else {
				return new ReturnInfo("提交失败", 0, 0, false);
			}
			return new ReturnInfo("提交成功", 0, 0, true);

		} catch (Exception e) {
			log.warn("BsInventoryStorageTemp update by key error..");
		}
		return new ReturnInfo("提交失败", 0, 0, false);
	}

	/**
	 * 更新实付款
	 * 
	 * @param @param req
	 * @param @return
	 * @return ReturnInfo
	 * @throws
	 * @author 常鹏飞
	 * @date 2017年5月3日下午5:03:33
	 */
	@RequestMapping(value = "/updateShifuk", method = RequestMethod.POST)
	@ResponseBody
	public ReturnInfo updateShifuk(HttpServletRequest req) {
		try {
			BsInventoryStorageTemp record = new BsInventoryStorageTemp();
			int id = NumberUtils.toInt(req.getParameter("id"));
			double shifuk = NumberUtils.toDouble(req.getParameter("shifuk"));
			if (id > 0) {
				record.setId(id);
				record.setShifuk(shifuk);
				bsInventoryStorageTempMapper.updateByPrimaryKeySelective(record);
			} else {
				return new ReturnInfo("提交失败", 0, 0, false);
			}
			return new ReturnInfo("提交成功", 0, 0, true);

		} catch (Exception e) {
			log.warn("BsInventoryStorageTemp update by key error..");
		}
		return new ReturnInfo("提交失败", 0, 0, false);
	}

	/**
	 * ajax根据主键单条修改 url:'http://ip/app/BsInventoryStorageTemp/(_id值)'
	 * data:'{"key1":"value1","key2":"value2",...}' type:'PUT'
	 */
	@RequestMapping(value = "/{key}", method = RequestMethod.PUT)
	@ResponseBody
	public ReturnInfo update(@PathVariable String key, @Valid @RequestBody BsInventoryStorageTemp info,
			HttpServletRequest req) {
		try {
			if (info != null) {
				BsInventoryStorageTemp akey = new BsInventoryStorageTemp();

				Field keyField = FieldUtils.allDeclaredField(BsInventoryStorageTempKey.class).get(0);

				if (keyField.getType().isInstance(1)) {
					FieldUtils.setObjectValue(akey, keyField, Integer.parseInt(key));
				} else if (keyField.getType().isInstance(1L)) {
					FieldUtils.setObjectValue(akey, keyField, Long.parseLong(key));
				} else {
					FieldUtils.setObjectValue(akey, keyField, key);
				}
				BsInventoryStorageTempExample example = new BsInventoryStorageTempExample();
				example.createCriteria().andIdEqualTo(akey.getId());
				bsInventoryStorageTempMapper.updateByExampleSelective(info, example);
			}
			return ReturnInfo.Success;
		} catch (Exception e) {
			log.warn("BsInventoryStorageTemp update by key error..");
		}
		return ReturnInfo.Faild;
	}

	private void setTableName(DbCondi dc) {
		String tName = DBBean.getTableName2Class(BsInventoryStorageTemp.class);
		if (dc.getOther() == null) {
			Map<String, Object> o = new HashMap<String, Object>();
			o.put(SqlMaker.TABLE_NAME, tName);
			dc.setOther(o);
		} else {
			dc.getOther().put(SqlMaker.TABLE_NAME, tName);
		}
	}

	@SuppressWarnings("serial")
	public static class BsInventoryStorageTemps extends ArrayList<BsInventoryStorageTemp> {
		public BsInventoryStorageTemps() {
			super();
		}
	}
}
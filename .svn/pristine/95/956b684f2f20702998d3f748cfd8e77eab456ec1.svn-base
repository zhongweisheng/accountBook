package lb.rest.user.db.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import java.util.List;
import java.util.Map;
import lb.rest.user.db.entity.BsInventoryOperate;
import lb.rest.user.db.entity.BsInventoryOperateExample.Criteria;
import lb.rest.user.db.entity.BsInventoryOperateExample.Criterion;
import lb.rest.user.db.entity.BsInventoryOperateExample;

public class BsInventoryOperateSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_inventory_operate
     *
     * @mbggenerated Tue May 16 11:46:43 CST 2017
     */
    public String countByExample(BsInventoryOperateExample example) {
        BEGIN();
        SELECT("count(*)");
        FROM("bs_inventory_operate");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_inventory_operate
     *
     * @mbggenerated Tue May 16 11:46:43 CST 2017
     */
    public String deleteByExample(BsInventoryOperateExample example) {
        BEGIN();
        DELETE_FROM("bs_inventory_operate");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_inventory_operate
     *
     * @mbggenerated Tue May 16 11:46:43 CST 2017
     */
    public String insertSelective(BsInventoryOperate record) {
        BEGIN();
        INSERT_INTO("bs_inventory_operate");
        
        if (record.getId() != null) {
            VALUES("id", "#{id,jdbcType=BIGINT}");
        }
        
        if (record.getOwnerId() != null) {
            VALUES("owner_id", "#{ownerId,jdbcType=INTEGER}");
        }
        
        if (record.getTargetType() != null) {
            VALUES("target_type", "#{targetType,jdbcType=INTEGER}");
        }
        
        if (record.getTargetId() != null) {
            VALUES("target_id", "#{targetId,jdbcType=INTEGER}");
        }
        
        if (record.getOperateTime() != null) {
            VALUES("operate_time", "#{operateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getOperateUserId() != null) {
            VALUES("operate_user_id", "#{operateUserId,jdbcType=INTEGER}");
        }
        
        if (record.getOperateUserName() != null) {
            VALUES("operate_user_name", "#{operateUserName,jdbcType=VARCHAR}");
        }
        
        if (record.getOperateType() != null) {
            VALUES("operate_type", "#{operateType,jdbcType=INTEGER}");
        }
        
        if (record.getOperateName() != null) {
            VALUES("operate_name", "#{operateName,jdbcType=VARCHAR}");
        }
        
        if (record.getContent() != null) {
            VALUES("content", "#{content,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            VALUES("remark", "#{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getDepotId() != null) {
            VALUES("depot_id", "#{depotId,jdbcType=INTEGER}");
        }
        
        if (record.getIntColumn1() != null) {
            VALUES("int_column1", "#{intColumn1,jdbcType=INTEGER}");
        }
        
        if (record.getIntColumn2() != null) {
            VALUES("int_column2", "#{intColumn2,jdbcType=INTEGER}");
        }
        
        if (record.getStrColumn1() != null) {
            VALUES("str_column1", "#{strColumn1,jdbcType=VARCHAR}");
        }
        
        if (record.getStrColumn2() != null) {
            VALUES("str_column2", "#{strColumn2,jdbcType=VARCHAR}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_inventory_operate
     *
     * @mbggenerated Tue May 16 11:46:43 CST 2017
     */
    public String selectByExample(BsInventoryOperateExample example) {
        BEGIN();
        if (example != null && example.isDistinct()) {
            SELECT_DISTINCT("id");
        } else {
            SELECT("id");
        }
        SELECT("owner_id");
        SELECT("target_type");
        SELECT("target_id");
        SELECT("operate_time");
        SELECT("operate_user_id");
        SELECT("operate_user_name");
        SELECT("operate_type");
        SELECT("operate_name");
        SELECT("content");
        SELECT("remark");
        SELECT("depot_id");
        SELECT("int_column1");
        SELECT("int_column2");
        SELECT("str_column1");
        SELECT("str_column2");
        FROM("bs_inventory_operate");
        applyWhere(example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            ORDER_BY(example.getOrderByClause());
        }
        if (example !=null && example.getLimit() > 0 ) { 
        
        	return SQL() + " limit #{offset,jdbcType=INTEGER} , #{limit,jdbcType=INTEGER}";
        	} 
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_inventory_operate
     *
     * @mbggenerated Tue May 16 11:46:43 CST 2017
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        BsInventoryOperate record = (BsInventoryOperate) parameter.get("record");
        BsInventoryOperateExample example = (BsInventoryOperateExample) parameter.get("example");
        
        BEGIN();
        UPDATE("bs_inventory_operate");
        
        if (record.getId() != null) {
            SET("id = #{record.id,jdbcType=BIGINT}");
        }
        
        if (record.getOwnerId() != null) {
            SET("owner_id = #{record.ownerId,jdbcType=INTEGER}");
        }
        
        if (record.getTargetType() != null) {
            SET("target_type = #{record.targetType,jdbcType=INTEGER}");
        }
        
        if (record.getTargetId() != null) {
            SET("target_id = #{record.targetId,jdbcType=INTEGER}");
        }
        
        if (record.getOperateTime() != null) {
            SET("operate_time = #{record.operateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getOperateUserId() != null) {
            SET("operate_user_id = #{record.operateUserId,jdbcType=INTEGER}");
        }
        
        if (record.getOperateUserName() != null) {
            SET("operate_user_name = #{record.operateUserName,jdbcType=VARCHAR}");
        }
        
        if (record.getOperateType() != null) {
            SET("operate_type = #{record.operateType,jdbcType=INTEGER}");
        }
        
        if (record.getOperateName() != null) {
            SET("operate_name = #{record.operateName,jdbcType=VARCHAR}");
        }
        
        if (record.getContent() != null) {
            SET("content = #{record.content,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            SET("remark = #{record.remark,jdbcType=VARCHAR}");
        }
        
        if (record.getDepotId() != null) {
            SET("depot_id = #{record.depotId,jdbcType=INTEGER}");
        }
        
        if (record.getIntColumn1() != null) {
            SET("int_column1 = #{record.intColumn1,jdbcType=INTEGER}");
        }
        
        if (record.getIntColumn2() != null) {
            SET("int_column2 = #{record.intColumn2,jdbcType=INTEGER}");
        }
        
        if (record.getStrColumn1() != null) {
            SET("str_column1 = #{record.strColumn1,jdbcType=VARCHAR}");
        }
        
        if (record.getStrColumn2() != null) {
            SET("str_column2 = #{record.strColumn2,jdbcType=VARCHAR}");
        }
        
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_inventory_operate
     *
     * @mbggenerated Tue May 16 11:46:43 CST 2017
     */
    public String updateByExample(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("bs_inventory_operate");
        
        SET("id = #{record.id,jdbcType=BIGINT}");
        SET("owner_id = #{record.ownerId,jdbcType=INTEGER}");
        SET("target_type = #{record.targetType,jdbcType=INTEGER}");
        SET("target_id = #{record.targetId,jdbcType=INTEGER}");
        SET("operate_time = #{record.operateTime,jdbcType=TIMESTAMP}");
        SET("operate_user_id = #{record.operateUserId,jdbcType=INTEGER}");
        SET("operate_user_name = #{record.operateUserName,jdbcType=VARCHAR}");
        SET("operate_type = #{record.operateType,jdbcType=INTEGER}");
        SET("operate_name = #{record.operateName,jdbcType=VARCHAR}");
        SET("content = #{record.content,jdbcType=VARCHAR}");
        SET("remark = #{record.remark,jdbcType=VARCHAR}");
        SET("depot_id = #{record.depotId,jdbcType=INTEGER}");
        SET("int_column1 = #{record.intColumn1,jdbcType=INTEGER}");
        SET("int_column2 = #{record.intColumn2,jdbcType=INTEGER}");
        SET("str_column1 = #{record.strColumn1,jdbcType=VARCHAR}");
        SET("str_column2 = #{record.strColumn2,jdbcType=VARCHAR}");
        
        BsInventoryOperateExample example = (BsInventoryOperateExample) parameter.get("example");
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_inventory_operate
     *
     * @mbggenerated Tue May 16 11:46:43 CST 2017
     */
    public String updateByPrimaryKeySelective(BsInventoryOperate record) {
        BEGIN();
        UPDATE("bs_inventory_operate");
        
        if (record.getOwnerId() != null) {
            SET("owner_id = #{ownerId,jdbcType=INTEGER}");
        }
        
        if (record.getTargetType() != null) {
            SET("target_type = #{targetType,jdbcType=INTEGER}");
        }
        
        if (record.getTargetId() != null) {
            SET("target_id = #{targetId,jdbcType=INTEGER}");
        }
        
        if (record.getOperateTime() != null) {
            SET("operate_time = #{operateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getOperateUserId() != null) {
            SET("operate_user_id = #{operateUserId,jdbcType=INTEGER}");
        }
        
        if (record.getOperateUserName() != null) {
            SET("operate_user_name = #{operateUserName,jdbcType=VARCHAR}");
        }
        
        if (record.getOperateType() != null) {
            SET("operate_type = #{operateType,jdbcType=INTEGER}");
        }
        
        if (record.getOperateName() != null) {
            SET("operate_name = #{operateName,jdbcType=VARCHAR}");
        }
        
        if (record.getContent() != null) {
            SET("content = #{content,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            SET("remark = #{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getDepotId() != null) {
            SET("depot_id = #{depotId,jdbcType=INTEGER}");
        }
        
        if (record.getIntColumn1() != null) {
            SET("int_column1 = #{intColumn1,jdbcType=INTEGER}");
        }
        
        if (record.getIntColumn2() != null) {
            SET("int_column2 = #{intColumn2,jdbcType=INTEGER}");
        }
        
        if (record.getStrColumn1() != null) {
            SET("str_column1 = #{strColumn1,jdbcType=VARCHAR}");
        }
        
        if (record.getStrColumn2() != null) {
            SET("str_column2 = #{strColumn2,jdbcType=VARCHAR}");
        }
        
        WHERE("id = #{id,jdbcType=BIGINT}");
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_inventory_operate
     *
     * @mbggenerated Tue May 16 11:46:43 CST 2017
     */
    protected void applyWhere(BsInventoryOperateExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}
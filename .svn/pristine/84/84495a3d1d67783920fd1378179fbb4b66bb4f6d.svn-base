package lb.rest.user.web.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import lb.rest.user.db.entity.BsInventoryUser;
import lb.rest.user.db.entity.BsInventoryUserExample;
import lb.rest.user.db.entity.Image;
import lb.rest.user.db.entity.ImageKey;
import lb.rest.user.db.entity.MlbVerificationCode;
import lb.rest.user.db.entity.MlbVerificationCodeExample;
import lb.rest.user.db.entity.Mlbuser;
import lb.rest.user.db.entity.MlbuserExample;
import lb.rest.user.db.mapper.BsInventoryUserMapper;
import lb.rest.user.db.mapper.ImageMapper;
import lb.rest.user.db.mapper.MlbVerificationCodeMapper;
import lb.rest.user.db.mapper.MlbuserMapper;
import lombok.extern.slf4j.Slf4j;
import net.sf.json.JSONObject;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.math.NumberUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mlb.util.HttpDownload;
import com.mlb.util.MlbConstant;
import com.mlb.util.MultiPartRequest;
import com.mlb.util.NumberToCN;
import com.mlb.util.SMSHelper;
import com.mlb.util.SequenceUtil;
import com.mlb.util.ThreeDes;
import com.mlb.util.UploadedFile;
import com.mlb.util.WXHelper;

import fc.wpf.rest.utils.BeanFactory;
import fc.wpf.rest.web.action.BasicCtrl;

@Slf4j
@Controller
@RequestMapping("/common")
public class CommonCtrl extends BasicCtrl {

	// private static AttrAreaMapper attrAreaMapper = (AttrAreaMapper)
	// BeanFactory.getBean("attrAreaMapper");
	// private static MyCommonMapper myCommonMapper = (MyCommonMapper)
	// BeanFactory.getBean("myCommonMapper");
	// private static MyCommonDao myCommonDao = (MyCommonDao)
	// BeanFactory.getBean("myCommonDao");
	private static ImageMapper imageMapper = (ImageMapper) BeanFactory.getBean("imageMapper");
	private static MlbuserMapper mlbuserMapper = (MlbuserMapper) BeanFactory.getBean("mlbuserMapper");

	private static MlbVerificationCodeMapper mlbVerificationCodeMapper = (MlbVerificationCodeMapper) BeanFactory
			.getBean("mlbVerificationCodeMapper");
	private static BsInventoryUserMapper bsInventoryUserMapper = (BsInventoryUserMapper) BeanFactory
			.getBean("bsInventoryUserMapper");

	@RequestMapping(value = "/sendSmsCode", method = RequestMethod.GET)
	@ResponseBody
	public Object sendSmsCode(HttpServletResponse response, HttpServletRequest request) {
		String phone = StringUtils.defaultIfEmpty(request.getParameter("phone"), "");
		String pageType = StringUtils.defaultIfEmpty(request.getParameter("pageType"), "");
		boolean sendResults = true;
		boolean sendResult = false;
		JSONObject result = new JSONObject();
		// 1、是否是注册用户、 pageType 1、注册 2、修改密码 3、激活
		// 后加 4： 卖粮宝 用户 找回密码
		if (pageType != null && !"".equals(pageType)) {
			BsInventoryUserExample example = new BsInventoryUserExample();
			// 手机号 加密（前三、后四不加密中间des 加密）TODO
			String loginnameEncrypt = ThreeDes.encryptPhone("", phone);
			example.createCriteria().andPhoneEqualTo(loginnameEncrypt);
			List<BsInventoryUser> userList = bsInventoryUserMapper.selectByExample(example);
			if ("1".equals(pageType)) {// 注册页面获取验证码
				// 此手机号是否已被注册。
				if (userList != null && userList.size() > 0) {
					result.put("success", false);
					result.put("message", "您的手机号已被注册，请到\"忘记密码\"中找回！");
					return result;
				}
			} else if ("3".equals(pageType)) {
				// 需要激活 TODO
			} else if ("4".equals(pageType)) {
				// 卖粮宝用户 修改 密码 pageType = 4
				MlbuserExample mlbuserExample = new MlbuserExample();
				mlbuserExample.createCriteria().andPhoneEqualTo(phone);
				List<Mlbuser> mlbuserList = mlbuserMapper.selectByExample(mlbuserExample);
				// 修改密码
				if (mlbuserList == null || mlbuserList.size() <= 0) {
					// 如果手机号不是注册用户。
					result.put("success", false);
					result.put("message", "您的手机号未注册，请注册！");
					return result;
				}

			} else {
				// 修改密码
				if (userList == null || userList.size() <= 0) {
					// 如果手机号不是注册用户。
					result.put("success", false);
					result.put("message", "您的手机号未注册，请注册！");
					return result;
				}
			}
		}
		MlbVerificationCodeExample example = new MlbVerificationCodeExample();
		example.createCriteria().andPhoneEqualTo(phone);
		MlbVerificationCode code = null;
		List<MlbVerificationCode> listCode = new ArrayList<MlbVerificationCode>();
		listCode = mlbVerificationCodeMapper.selectByExample(example);
		if (listCode != null && listCode.size() > 0) {
			code = listCode.get(0);
		}
		if (code != null) {// 如果存在
			// 存在，获取当前时间和数据库中的对比计算
			long time = time(code.getStartdate());
			if (time > 30) {
				// 如果时间大于30分钟，则要清空验证码获取次数，记录当前时间，
				code.setNum(1);
				code.setStartdate(new Date());
				code.setStatus(0);
				code.setPhone(phone);
				// 更新操作
				mlbVerificationCodeMapper.updateByPrimaryKeySelective(code);
				sendResults = true;
			} else {
				// 时间小于30分钟，对比次数，
				int num = code.getNum() + 1;
				if (num > 5) {// 大于5次
					// 加上本次获取次数如果大于5，则要给予提示信息，
					sendResults = false;
				} else {// 小于5次
					code.setNum(code.getNum() + 1);
					code.setPhone(phone);
					mlbVerificationCodeMapper.updateByPrimaryKeySelective(code);
					sendResults = true;
				}
			}
		} else {// 不存在
			code = new MlbVerificationCode();
			// 不存在时，要新增数据 时间 次数+1 手机号，状态1
			code.setNum(1);
			code.setStartdate(new Date());
			code.setStatus(0);
			code.setPhone(phone);
			try {
				code.setId(SequenceUtil.getInstance().nextValue("mlb_verification_code"));
			} catch (Exception e) {
				e.printStackTrace();
			}
			mlbVerificationCodeMapper.insertSelective(code);
			sendResults = true;
		}
		if (sendResults) {
			// 发送短信
			String genSmscode = nextInt(1000, 9999) + "";
			// 调用发送短信接口
			String resultStr = SMSHelper.sendSMS("您的手机验证码是:" + genSmscode, phone);
			if ("ok".equalsIgnoreCase(resultStr)) {
				sendResult = true;
			} else {
				log.error("lb.rest.basic.web.action.CommonCtrl.sendSms : " + resultStr);
			}
			Date sendDate = new Date();
			if (sendResult) {
				HttpSession session = request.getSession();
				session.setAttribute("sendSmscodeSession", genSmscode);
				session.setAttribute("sendSmsTimeSession", sendDate.getTime() + "");
				result.put("success", true);
			} else {
				result.put("success", false);
				result.put("message", "验证码发送失败！！");
			}

		} else {
			result.put("success", false);
			result.put("message", "您获取验证码的次数过于频繁！请稍后再试！谢谢！");
		}
		return result;
	}

	public static Long time(Date date2) {
		long time = 0l;
		try {
			Date date = date2;
			Date date1 = new Date();
			time = (date1.getTime() - date.getTime()) / (1000 * 60);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return time;
	}

	public static int nextInt(int min, int max) {
		Random rand = new Random();
		int tmp = Math.abs(rand.nextInt());
		int result = tmp % (max - min + 1) + min;
		return result;
	}

	@RequestMapping(value = "/getAccessToken", method = RequestMethod.GET)
	@ResponseBody
	public Object getAccessToken(HttpServletRequest req) {
		String token = WXHelper.getAccessToken();
		return token;
	}

	@RequestMapping(value = "/updateAccessToken", method = RequestMethod.GET)
	@ResponseBody
	public Object updateAccessToken(HttpServletRequest req) {
		boolean result = false;
		WXHelper.updateAccessToken();
		result = true;
		return result;
	}

	@RequestMapping(value = "/upload", method = RequestMethod.POST)
	@ResponseBody
	public Object upload(HttpServletResponse response, HttpServletRequest request) {

		String path = MlbConstant.FILE_UPLOAD_PATH;
		Image bo = null;
		try {
			MultiPartRequest req = new MultiPartRequest(request, path, 10 * 1024 * 1024, "UTF-8");
			java.util.Map<String, UploadedFile> m = req.getFileParts();
			request.setCharacterEncoding("utf-8");
			response.setContentType("text/html;charset=utf-8");

			String imageType = req.getParameter("imageType");
			int foreignKey = NumberUtils.toInt(req.getParameter("foreignKey"), 0);

			for (String fname : m.keySet()) {
				int i = fname.lastIndexOf(File.separatorChar);
				String fileName = fname.substring(i + 1);
				String append = "";
				int index = fileName.lastIndexOf('.');
				if (index > 0) {
					append = fileName.substring(index + 1);
				}
				String imagename = UUID.randomUUID().toString();
				if (append.length() > 0) {
					imagename += "." + append;
				}
				File f = null;
				f = new File(MlbConstant.FILE_UPLOAD_PATH + fileName);
				File fNew = new File(MlbConstant.FILE_UPLOAD_PATH + imagename);
				if (fNew.exists())
					fNew.delete();
				f.renameTo(fNew);
				f = fNew;
				bo = new Image();
				bo.setImagename(fileName);
				bo.setImagepath(MlbConstant.FILE_UPLOAD_PATH + imagename);
				bo.setImagetype(imageType);
				bo.setForeignkey(foreignKey);
				bo.setStatus(1);
				bo.setId(SequenceUtil.getInstance().nextValue("image"));
				imageMapper.insert(bo);
			}
		} catch (Exception e) {
			e.printStackTrace();
			bo = null;
		}
		Map<String, Object> resp = new HashMap<String, Object>();
		if (bo == null) {
			resp.put("success", false);
		} else {
			resp.put("success", true);
			resp.put("imageid", bo.getId());
		}
		return resp;
	}

	@RequestMapping(value = "/getWxUserByCode", method = RequestMethod.GET)
	@ResponseBody
	public Object getWxUser(HttpServletRequest req) {
		String code = req.getParameter("code");
		JSONObject object = WXHelper.getWXAccessToken(code);
		String openId = "";
		if (object != null && object.containsKey("openid")) {
			// String accessToken = WXHelper.getAccessToken();
			String accessToken = object.getString("access_token");
			openId = object.getString("openid");
			JSONObject objectUser = WXHelper.getWXUserInfo(openId, accessToken);
			if (objectUser != null && objectUser.containsKey("headimgurl")) {
				String nickname = objectUser.getString("nickname");
				String headimgurl = objectUser.getString("headimgurl");
				if (nickname != null || headimgurl != null) {
					object.put("nickname", nickname);
					object.put("headimgurl", headimgurl);
				}
			}
		}
		return object;
	}

	@RequestMapping(value = "/getWXJsInfo", method = RequestMethod.POST)
	@ResponseBody
	public Object getWXJsInfo(HttpServletRequest req) {
		String requestUrl = req.getParameter("requestUrl");
		String text = req.getParameter("text");

		String timestamp = "" + (new java.util.Date().getTime() / 1000);
		String randomString = RandomStringUtils.randomAlphanumeric(16);
		String ticket = "";
		String token = "";
		Map<String, String> map = new HashMap<String, String>();
		if (StringUtils.isNotEmpty(requestUrl)) {
			token = WXHelper.getAccessToken();
			ticket = WXHelper.getJSAPITicket(token);

			String paras = "jsapi_ticket=" + ticket + "&noncestr=" + randomString + "&timestamp=";
			paras += timestamp + "&url=" + requestUrl;
			String sign = WXHelper.getSHA1Sign(paras);
			String queryString = req.getQueryString();
			if (StringUtils.isNotEmpty(queryString)) {
				paras += "?" + queryString;
			}

			// timestamp: '<%=timestamp%>',
			// nonceStr: '<%=randomString%>',
			// signature: '<%=sign%>',

			map.put("timestamp", timestamp);
			map.put("nonceStr", randomString);
			map.put("signature", sign);
			return map;
		} else {
			return map;
		}
	}

	@SuppressWarnings("resource")
	@RequestMapping(value = "/getLocationInfo", method = RequestMethod.POST)
	@ResponseBody
	public Object getLocationInfo(HttpServletRequest req) {
		String lat = req.getParameter("lat");
		String lng = req.getParameter("lng");

		JSONObject jsonObject = null;
		if (StringUtils.isNotEmpty(lat) && StringUtils.isNotEmpty(lng)) {
			String url = "http://api.map.baidu.com/geocoder/v2/?ak=XFFxeu5ZP47kxS2obcqKM2AUpwHG4Gbs&location=" + lat
					+ "," + lng + "&output=json&pois=1";
			try {
				@SuppressWarnings("deprecation")
				DefaultHttpClient httpclient = new DefaultHttpClient();
				HttpPost httppost = new HttpPost(url);
				HttpResponse resp = httpclient.execute(httppost);
				int retcode = resp.getStatusLine().getStatusCode();
				HttpEntity entity = resp.getEntity();
				String s = EntityUtils.toString(entity, "utf-8");
				httpclient.getConnectionManager().shutdown();
				jsonObject = JSONObject.fromObject(s);
			} catch (Exception e) {
				e.printStackTrace();
				jsonObject = null;
			}
		}
		// StringBuffer table = new StringBuffer(100);
		// table.append("{\"status\":0,\"result\":{\"location\":{\"lng\":104.04700999999996,\"lat\":30.548396905160847},\"formatted_address\":\"四川省成都市武侯区天府四街\",\"business\":\"\","
		// +
		// "\"addressComponent\":{\"country\":\"中国\",\"country_code\":0,\"province\":\"四川省\",\"city\":\"成都市\",\"district\":\"武侯区\",\"adcode\":\"510107\",\"street\":\"天府四街\",\"street_number\":\"\",\"direction\":\"\",\"distance\":\"\"},\"pois\":[{\"addr\":\"成都市武侯区\",\"cp\":\" \",\"direction\":\"东南\",\"distance\":\"58\",\"name\":\"保利·心语花园官邸-5栋\",\"poiType\":\"房地产\",\"point\":{\"x\":104.04673872446225,\"y\":30.54878561088612},\"tag\":\"房地产;住宅区\",\"tel\":\"\",\"uid\":\"37b12b8ab641055d14c8f61a\",\"zip\":\"\"},{\"addr\":\"成都市武侯区\",\"cp\":\" \",\"direction\":\"西南\",\"distance\":\"59\",\"name\":\"保利·心语花园官邸-4栋\",\"poiType\":\"房地产\",\"point\":{\"x\":104.04728669082333,\"y\":30.5487933861634},\"tag\":\"房地产;住宅区\",\"tel\":\"\",\"uid\":\"af392cce623c8408c27da2b3\",\"zip\":\"\"},{\"addr\":\"高新区南高新、剑南大道伊藤旗舰店旁\",\"cp\":\" \",\"direction\":\"西\",\"distance\":\"144\",\"name\":\"保利心语花园\",\"poiType\":\"房地产\",\"point\":{\"x\":104.04823889466391,\"y\":30.548746734490327},\"tag\":\"房地产;住宅区\",\"tel\":\"\",\"uid\":\"dbf4d6eedbe0bd546fa3ccdb\",\"zip\":\"\"},{\"addr\":\"成都市武侯区\",\"cp\":\" \",\"direction\":\"东南\",\"distance\":\"99\",\"name\":\"保利·心语花园官邸-6栋\",\"poiType\":\"房地产\",\"point\":{\"x\":104.04623567337666,\"y\":30.548777835608218},\"tag\":\"房地产;住宅区\",\"tel\":\"\",\"uid\":\"4a81254d2e044b4adbeced13\",\"zip\":\"\"},{\"addr\":\"成都市武侯区\",\"cp\":\" \",\"direction\":\"东\",\"distance\":\"152\",\"name\":\"保利·心语花园官邸-7栋\",\"poiType\":\"房地产\",\"point\":{\"x\":104.04570567312577,\"y\":30.54877006032969},\"tag\":\"房地产;住宅区\",\"tel\":\"\",\"uid\":\"5739c38d5cbfe83fb21e36ba\",\"zip\":\"\"},{\"addr\":\"四川省成都市武侯区荣华南路366号\",\"cp\":\" \",\"direction\":\"东南\",\"distance\":\"192\",\"name\":\"保利心语花园别墅\",\"poiType\":\"房地产\",\"point\":{\"x\":104.04584940200737,\"y\":30.54950870898165},\"tag\":\"房地产;住宅区\",\"tel\":\"\",\"uid\":\"d614e647ce943aad41d63e49\",\"zip\":\"\"},{\"addr\":\"荣华南路201号，荣华南路与天府四街交叉口往北10米\",\"cp\":\" \",\"direction\":\"西\",\"distance\":\"370\",\"name\":\"完美汽车\",\"poiType\":\"汽车服务\",\"point\":{\"x\":104.05032296344706,\"y\":30.548653431076248},\"tag\":\"汽车服务\",\"tel\":\"\",\"uid\":\"2e0f0ed7ebaa1ffe00ff2d44\",\"zip\":\"\"},{\"addr\":\"武侯区保利心语三期盛源街1131号(原同德街)\",\"cp\":\" \",\"direction\":\"西南\",\"distance\":\"413\",\"name\":\"三只熊披萨外卖（保利心语店）\",\"poiType\":\"美食\",\"point\":{\"x\":104.0486790643638,\"y\":30.55126589243267},\"tag\":\"美食;外国餐厅\",\"tel\":\"\",\"uid\":\"800c2024cdb63509dbeced1d\",\"zip\":\"\"},{\"addr\":\"天府三街保利心语花园三期2幢1103室\",\"cp\":\" \",\"direction\":\"南\",\"distance\":\"552\",\"name\":\"全鑫整装家居馆\",\"poiType\":\"购物\",\"point\":{\"x\":104.04756516553143,\"y\":30.5526653960908},\"tag\":\"购物;家居建材\",\"tel\":\"\",\"uid\":\"3eef7c8b5aaf0465e9f85306\",\"zip\":\"\"},{\"addr\":\"天府三街1007-1011\",\"cp\":\" \",\"direction\":\"西南\",\"distance\":\"653\",\"name\":\"中国建设银行(保利心语四期东)\",\"poiType\":\"金融\",\"point\":{\"x\":104.04999059040836,\"y\":30.552774245521094},\"tag\":\"金融;银行\",\"tel\":\"\",\"uid\":\"7306c3e473f14b19f72310cb\",\"zip\":\"\"}],\"poiRegions\":[],\"sematic_description\":\"保利·心语花园官邸-5栋东南58米\",\"cityCode\":75}}");
		//
		// jsonObject = JSONObject.fromObject(table.toString());

		/*
		 * 返回码 定义 0 正常 1 服务器内部错误 2 请求参数非法 3 权限校验失败 4 配额校验失败 5 ak不存在或者非法 101 服务禁用
		 * 102 不通过白名单或者安全码不对 2xx 无权限 3xx 配额错误
		 */
		if (jsonObject.containsKey("status")) {
			int status = jsonObject.getInt("status");
			if (status == 0) {
				JSONObject resultObject = (JSONObject) jsonObject.get("result");
				String address = resultObject.getString("formatted_address");
				JSONObject addressObject = (JSONObject) resultObject.get("addressComponent");
				String country = addressObject.getString("country");
				String province = addressObject.getString("province");
				String city = addressObject.getString("city");
				String district = addressObject.getString("district");
				String adcode = addressObject.getString("adcode");
				System.out.println(address);
				System.out.println(addressObject);
				System.out.println(country + ":" + province + ":" + city + ":" + district + ":" + adcode + ":");
				return addressObject;
			} else {
				return "";
			}
		}
		return "";
	}

	@RequestMapping(value = "/downloadWX", method = RequestMethod.POST)
	@ResponseBody
	public Object downloadWX(HttpServletResponse response, HttpServletRequest request) {

		String GET_MEDIA_URL = "http://file.api.weixin.qq.com/cgi-bin/media/get?access_token=";

		String mediaId = StringUtils.trimToEmpty(request.getParameter("mediaId"));
		String imageType = StringUtils.trimToEmpty(request.getParameter("imageType"));
		if (StringUtils.isEmpty(mediaId) || StringUtils.isEmpty(imageType)) {
			return "";
		}

		String accessToken = "";
		accessToken = WXHelper.getAccessToken();
		String url = GET_MEDIA_URL + accessToken + "&media_id=" + mediaId;
		// url = "http://wxmlb.wvagri.com/mlbweb/image/logo1.png";

		JSONObject resp = new JSONObject();
		response.setContentType("text/html;charset=utf-8");
		Image bo = null;
		try {
			String fileName = HttpDownload.download(url);
			bo = new Image();
			bo.setImagename("");
			bo.setImagepath(fileName);
			bo.setImagetype(imageType);
			bo.setForeignkey(0);
			bo.setStatus(1);
			bo.setId(SequenceUtil.getInstance().nextValue("image"));
			imageMapper.insert(bo);
		} catch (Exception e) {
			e.printStackTrace();
			bo = null;
		}
		if (bo == null) {
			resp.put("success", false);
		} else {
			resp.put("success", true);
			resp.put("imageid", bo.getId());
		}

		return resp;
	}

	@RequestMapping(value = "/download", method = RequestMethod.GET)
	@ResponseBody
	public Object download(HttpServletResponse response, HttpServletRequest request) {
		JSONObject resp = new JSONObject();
		String id = request.getParameter("id");
		int idInt = NumberUtils.toInt(id);
		if (idInt <= 0) {
			return "";
		}
		String filename = MlbConstant.FILE_UPLOAD_PATH + File.separator + "defaultPic.jpg";
		if (id != null && !id.equals("") && !id.equals("null")) {
			ImageKey key = new ImageKey();
			key.setId(NumberUtils.toInt(id));
			Image bo = imageMapper.selectByPrimaryKey(key);
			if (bo != null)
				filename = bo.getImagepath();
		}
		File f = new File(filename);
		if (f.exists()) {
			try {
				FileInputStream fis;
				fis = new FileInputStream(f);
				byte[] buffer = new byte[10240];
				int i = fis.read(buffer);
				OutputStream os = response.getOutputStream();
				while (i >= 0) {
					os.write(buffer, 0, i);
					i = fis.read(buffer);
				}
				fis.close();
				os.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return resp;
	}

	@RequestMapping(value = "/numberToCN", method = RequestMethod.GET)
	@ResponseBody
	public Object numberToCN(HttpServletRequest req) {
		String number = req.getParameter("number");
		String cn = "";
		if (StringUtils.isNotEmpty(number)) {
			double money = Double.parseDouble(number);
			BigDecimal numberOfMoney = new BigDecimal(money);
			cn = NumberToCN.number2CNMontrayUnit(numberOfMoney);
		}
		return cn;
	}

}
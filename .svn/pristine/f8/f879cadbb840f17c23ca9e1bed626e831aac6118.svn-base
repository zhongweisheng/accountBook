package lb.rest.user.db.mapper;

import java.util.List;
import lb.rest.user.db.entity.BsSequence;
import lb.rest.user.db.entity.BsSequenceExample;
import lb.rest.user.db.entity.BsSequenceKey;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface BsSequenceMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_sequence
     *
     * @mbggenerated Sun Apr 02 15:40:19 CST 2017
     */
    @SelectProvider(type=BsSequenceSqlProvider.class, method="countByExample")
    int countByExample(BsSequenceExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_sequence
     *
     * @mbggenerated Sun Apr 02 15:40:19 CST 2017
     */
    @DeleteProvider(type=BsSequenceSqlProvider.class, method="deleteByExample")
    int deleteByExample(BsSequenceExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_sequence
     *
     * @mbggenerated Sun Apr 02 15:40:19 CST 2017
     */
    @Delete({
        "delete from bs_sequence",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(BsSequenceKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_sequence
     *
     * @mbggenerated Sun Apr 02 15:40:19 CST 2017
     */
    @Insert({
        "insert into bs_sequence (key_id, key_category, ",
        "key_type, key_value)",
        "values (#{keyId,jdbcType=INTEGER}, #{keyCategory,jdbcType=INTEGER}, ",
        "#{keyType,jdbcType=INTEGER}, #{keyValue,jdbcType=INTEGER})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="id", before=false, resultType=Integer.class)
    int insert(BsSequence record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_sequence
     *
     * @mbggenerated Sun Apr 02 15:40:19 CST 2017
     */
    @InsertProvider(type=BsSequenceSqlProvider.class, method="insertSelective")
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="id", before=false, resultType=Integer.class)
    int insertSelective(BsSequence record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_sequence
     *
     * @mbggenerated Sun Apr 02 15:40:19 CST 2017
     */
    @SelectProvider(type=BsSequenceSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="key_id", property="keyId", jdbcType=JdbcType.INTEGER),
        @Result(column="key_category", property="keyCategory", jdbcType=JdbcType.INTEGER),
        @Result(column="key_type", property="keyType", jdbcType=JdbcType.INTEGER),
        @Result(column="key_value", property="keyValue", jdbcType=JdbcType.INTEGER)
    })
    List<BsSequence> selectByExample(BsSequenceExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_sequence
     *
     * @mbggenerated Sun Apr 02 15:40:19 CST 2017
     */
    @Select({
        "select",
        "id, key_id, key_category, key_type, key_value",
        "from bs_sequence",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="key_id", property="keyId", jdbcType=JdbcType.INTEGER),
        @Result(column="key_category", property="keyCategory", jdbcType=JdbcType.INTEGER),
        @Result(column="key_type", property="keyType", jdbcType=JdbcType.INTEGER),
        @Result(column="key_value", property="keyValue", jdbcType=JdbcType.INTEGER)
    })
    BsSequence selectByPrimaryKey(BsSequenceKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_sequence
     *
     * @mbggenerated Sun Apr 02 15:40:19 CST 2017
     */
    @UpdateProvider(type=BsSequenceSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") BsSequence record, @Param("example") BsSequenceExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_sequence
     *
     * @mbggenerated Sun Apr 02 15:40:19 CST 2017
     */
    @UpdateProvider(type=BsSequenceSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") BsSequence record, @Param("example") BsSequenceExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_sequence
     *
     * @mbggenerated Sun Apr 02 15:40:19 CST 2017
     */
    @UpdateProvider(type=BsSequenceSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(BsSequence record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table bs_sequence
     *
     * @mbggenerated Sun Apr 02 15:40:19 CST 2017
     */
    @Update({
        "update bs_sequence",
        "set key_id = #{keyId,jdbcType=INTEGER},",
          "key_category = #{keyCategory,jdbcType=INTEGER},",
          "key_type = #{keyType,jdbcType=INTEGER},",
          "key_value = #{keyValue,jdbcType=INTEGER}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(BsSequence record);
}
package lb.rest.user.web.action;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import lb.rest.user.db.entity.BsInventoryStorage;
import lb.rest.user.db.entity.BsInventoryStoragePay;
import lb.rest.user.db.entity.BsInventoryStoragePayExample;
import lb.rest.user.db.entity.BsInventoryStoragePayExample.Criteria;
import lb.rest.user.db.entity.BsInventoryStoragePayKey;
import lb.rest.user.db.mapper.BsInventoryStorageMapper;
import lb.rest.user.db.mapper.BsInventoryStoragePayMapper;
import lombok.extern.slf4j.Slf4j;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.math.NumberUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mlb.util.JsonDataUtils;
import com.mlb.util.SequenceUtil;
import com.mlb.util.TDateTimeUnits;

import fc.wpf.rest.db.service.DataService;
import fc.wpf.rest.utils.BeanFactory;
import fc.wpf.rest.utils.DBBean;
import fc.wpf.rest.web.action.BasicCtrl;
import fc.wpf.rest.web.bean.DbCondi;
import fc.wpf.rest.web.bean.ListInfo;
import fc.wpf.rest.web.bean.ReturnInfo;
import fc.wpf.rest.web.bean.SqlMaker;
import fc.wpf.rest.web.bind.FieldUtils;

@Slf4j
@Controller
@RequestMapping("/bsinventorystoragepay")
public class BsInventoryStoragePayCtrl extends BasicCtrl {

	private static BsInventoryStoragePayMapper bsInventoryStoragePayMapper = (BsInventoryStoragePayMapper) BeanFactory
			.getBean("bsInventoryStoragePayMapper");
	private static BsInventoryStorageMapper bsInventoryStorageMapper = (BsInventoryStorageMapper) BeanFactory
			.getBean("bsInventoryStorageMapper");

	private static DataService mysqlDataService = (DataService) BeanFactory.getBean("mysqlDataService");

	/**
	 * ajax单条数据插入 url:'http://ip/rest/bsinventorystoragepay'
	 * data:'{"key1":"value1","key2":"value2",...}' type:’POST
	 */
	@RequestMapping(value = "", method = RequestMethod.POST)
	@ResponseBody
	public ReturnInfo insert(BsInventoryStoragePay info, HttpServletRequest req) {
		try {
			int id = SequenceUtil.getInstance().nextValue("bs_inventory_storage_pay");
			info.setId(id);
			info.setCreateTime(new Date());
			int flag = bsInventoryStoragePayMapper.insertSelective(info);
			if (flag > 0) {
				double hasSettled = NumberUtils.toDouble(req.getParameter("hasSettled"));
				double notSettled = NumberUtils.toDouble(req.getParameter("notSettled"));

				BsInventoryStorage record = new BsInventoryStorage();
				int storageId = NumberUtils.toInt(req.getParameter("storageId"));

				if (storageId > 0) {
					record.setId(storageId);
					record.setHasSettled(hasSettled);
					record.setNotSettled(notSettled);
					record.setUpdateTime(new Date());
					bsInventoryStorageMapper.updateByPrimaryKeySelective(record);
				} else {
					return new ReturnInfo("提交失败", 0, 0, false);
				}
				return ReturnInfo.Success;
			}
		} catch (Exception e) {
			log.warn("BsInventoryStoragePayCtrl insert error..", e);
			// e.printStackTrace();
		}
		return ReturnInfo.Faild;
	}

	@RequestMapping(value = "/list", method = RequestMethod.POST)
	@ResponseBody
	public Object list(HttpServletRequest req) {
		JsonDataUtils json = new JsonDataUtils();
		List<BsInventoryStoragePay> list = null;
		try {
			int storageId = NumberUtils.toInt(req.getParameter("storageId"));
			int operateUserId = NumberUtils.toInt(req.getParameter("operateUserId"));

			String startDate = StringUtils.trimToEmpty(req.getParameter("startDate"));
			String endDate = StringUtils.trimToEmpty(req.getParameter("endDate"));

			int currentPage = NumberUtils.toInt(req.getParameter("currentPage"), 1);
			int pageSize = NumberUtils.toInt(req.getParameter("pageSize"), 10);

			BsInventoryStoragePayExample example = new BsInventoryStoragePayExample();
			example.setOrderByClause(" create_time desc ");
			int offset = (currentPage - 1) * pageSize;
			example.setLimit(pageSize);
			example.setOffset(offset);
			Criteria criteria = example.createCriteria();
			// if (storageId > 0) {
			criteria.andStorageIdEqualTo(storageId);
			// }
			if (operateUserId > 0) {
				criteria.andOperateUserIdEqualTo(operateUserId);
			}

			list = bsInventoryStoragePayMapper.selectByExample(example);
			int total = bsInventoryStoragePayMapper.countByExample(example);

			json.setTotal(total);
			boolean success = false;
			int number = offset + 1;
			if (list != null && list.size() > 0) {
				success = true;
				// 结算时间操作人结算量（公斤）结算单价（元/斤）金额（元）已付款（元）

				json.addTitle("number", "id", "operateUserName", "createTime", "settleCount", "settlePrice",
						"settleMoney", "actualPay");
				if (list != null) {
					for (BsInventoryStoragePay item : list) {
						// String formattedDate =
						// DateUtil.format(item.getCreateTime(),
						// DateStyle.YYYY_MM_DD_HH_MM_SS);
						json.addOneRow(number++, item.getId(), item.getOperateUserName(),
								TDateTimeUnits.formatDate(item.getCreateTime()), item.getSettleCount(),
								item.getSettlePrice(), item.getSettleMoney(), item.getActualPay());
					}
				}
			} else {
				success = false;
			}
			json.setSuccess(success);

		} catch (Exception e) {
			log.warn("BsInventoryStoragePayCtrl get by key error..", e);
		}
		return json.toJsonObj();
	}

	/**
	 * ajax根据ID主键查询 请求 url: 'http://ip/app/bsinventorystoragepay/(_id值)'
	 * dataType: 'json' type: 'get'
	 */
	@RequestMapping(value = "/{key}", method = RequestMethod.GET)
	@ResponseBody
	public ListInfo<BsInventoryStoragePay> get(@PathVariable String key, HttpServletRequest req) {
		int totalCount = 1;
		List<BsInventoryStoragePay> list = null;
		try {
			BsInventoryStoragePay akey = new BsInventoryStoragePay();

			Field keyField = FieldUtils.allDeclaredField(BsInventoryStoragePayKey.class).get(0);

			if (keyField.getType().isInstance(1)) {
				FieldUtils.setObjectValue(akey, keyField, Integer.parseInt(key));
			} else if (keyField.getType().isInstance(1L)) {
				FieldUtils.setObjectValue(akey, keyField, Long.parseLong(key));
			} else {
				FieldUtils.setObjectValue(akey, keyField, key);
			}

			if (true && akey.getId() == null) {
				list = new ArrayList<BsInventoryStoragePay>();
			} else {
				BsInventoryStoragePayExample example = new BsInventoryStoragePayExample();
				example.createCriteria().andIdEqualTo(akey.getId());
				list = bsInventoryStoragePayMapper.selectByExample(example);
			}
			totalCount = list.size();
		} catch (Exception e) {
			log.warn("BsInventoryStoragePayCtrl get by key error..", e);
		}
		return new ListInfo<>(totalCount, list, 0, 1);
	}

	/**
	 * ajax根据主键删除 url:'http://ip/app/bsinventorystoragepay/(_id值)' type:
	 * 'DELETE' dataType: 'json'
	 */
	@RequestMapping(value = "/{key}", method = RequestMethod.DELETE)
	@ResponseBody
	public ReturnInfo delete(@PathVariable String key, HttpServletRequest req) {
		try {
			BsInventoryStoragePay akey = new BsInventoryStoragePay();

			Field keyField = FieldUtils.allDeclaredField(BsInventoryStoragePayKey.class).get(0);

			if (keyField.getType().isInstance(1)) {
				FieldUtils.setObjectValue(akey, keyField, Integer.parseInt(key));
			} else if (keyField.getType().isInstance(1L)) {
				FieldUtils.setObjectValue(akey, keyField, Long.parseLong(key));
			} else {
				FieldUtils.setObjectValue(akey, keyField, key);
			}

			if (true && akey.getId() != null) {
				bsInventoryStoragePayMapper.deleteByPrimaryKey(akey);
				return ReturnInfo.Success;
			}
		} catch (Exception e) {
			log.warn("BsInventoryStoragePayCtrl delete by key error..");
		}
		return ReturnInfo.Faild;
	}

	/**
	 * ajax根据主键单条修改 url:'http://ip/app/bsinventorystoragepay/(_id值)'
	 * data:'{"key1":"value1","key2":"value2",...}' type:'PUT'
	 */
	/*
	 * @RequestMapping(value = "/{key}", method = RequestMethod.POST)
	 * 
	 * @ResponseBody public ReturnInfo update(@PathVariable String key,
	 * BsInventoryStoragePay info, HttpServletRequest req) { try { if (info !=
	 * null) { BsInventoryStoragePay akey = new BsInventoryStoragePay();
	 * 
	 * Field keyField =
	 * FieldUtils.allDeclaredField(BsInventoryStoragePayKey.class).get(0);
	 * 
	 * if (keyField.getType().isInstance(1)) { FieldUtils.setObjectValue(akey,
	 * keyField, Integer.parseInt(key)); } else if
	 * (keyField.getType().isInstance(1L)) { FieldUtils.setObjectValue(akey,
	 * keyField, Long.parseLong(key)); } else { FieldUtils.setObjectValue(akey,
	 * keyField, key); } BsInventoryStoragePayExample example = new
	 * BsInventoryStoragePayExample();
	 * example.createCriteria().andIdEqualTo(akey.getId());
	 * info.setUpdateTime(new Date());
	 * bsInventoryStoragePayMapper.updateByExampleSelective(info, example); }
	 * return ReturnInfo.Success; } catch (Exception e) {
	 * log.warn("BsInventoryStoragePay update by key error.."); } return
	 * ReturnInfo.Faild; }
	 */

	private void setTableName(DbCondi dc) {
		String tName = DBBean.getTableName2Class(BsInventoryStoragePay.class);
		if (dc.getOther() == null) {
			Map<String, Object> o = new HashMap<String, Object>();
			o.put(SqlMaker.TABLE_NAME, tName);
			dc.setOther(o);
		} else {
			dc.getOther().put(SqlMaker.TABLE_NAME, tName);
		}
	}

	@SuppressWarnings("serial")
	public static class BsInventoryStoragePays extends ArrayList<BsInventoryStoragePay> {
		public BsInventoryStoragePays() {
			super();
		}
	}
}
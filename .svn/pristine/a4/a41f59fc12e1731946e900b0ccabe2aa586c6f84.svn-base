package lb.rest.user.db.dao;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import lb.rest.user.db.entity.BsInventoryTemporary;
import lb.rest.user.db.entity.BsInventoryTemporaryExample;
import lb.rest.user.db.entity.BsInventoryTemporaryExample.Criteria;
import lb.rest.user.db.entity.BsInventoryTemporaryKey;
import lb.rest.user.db.mapper.BsInventoryTemporaryMapper;
import lb.rest.user.db.mapper.CommonMapper;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.math.NumberUtils;
import org.springframework.stereotype.Repository;

import com.mlb.bo.InventoryRecordBO;
import com.mlb.enums.GrainTypeEnum;
import com.mlb.enums.RecordTypeEnum;
import com.mlb.util.JsonDataUtils;
import com.mlb.util.TDateTimeUnits;

import fc.wpf.rest.db.iface.StaticTableDaoSupport;
import fc.wpf.rest.utils.DateStyle;
import fc.wpf.rest.utils.DateUtil;
import fc.wpf.rest.utils.NumberFormatUtil;

@Repository
public class BsInventoryTemporaryDao implements
		StaticTableDaoSupport<BsInventoryTemporary, BsInventoryTemporaryExample, BsInventoryTemporaryKey> {

	@Resource
	private BsInventoryTemporaryMapper mapper;

	@Resource
	private CommonMapper commonMapper;

	@Resource
	private BsInventoryDepotDao bsInventoryDepotDao;

	public int updateByExampleSelective(int depotId, int ownerId) {
		BsInventoryTemporaryExample example = new BsInventoryTemporaryExample();
		Criteria criteria = example.createCriteria();
		criteria.andUserIdEqualTo(ownerId).andDepotIdEqualTo(0);
		BsInventoryTemporary record = new BsInventoryTemporary();
		record.setDepotId(depotId);
		return mapper.updateByExampleSelective(record, example);
	}

	public JsonDataUtils searchList(boolean isExcel, int ownerId, int userId, int grainType, int recordType,
			int searchType, int staffId, String staffName, int isPay, String recordNumber, String licensePlate,
			int driverId, String strTime, String endTime, int depotId, int currentPage, int pageSize) {

		JsonDataUtils jsonUtils = new JsonDataUtils();
		jsonUtils.setSearchType(searchType);
		jsonUtils.setGrainType(grainType);
		jsonUtils.setRecordType(recordType);
		int offset = (currentPage - 1) * pageSize;
		int limit = pageSize;
		int number = offset + 1;

		if (searchType == 1) {
			BsInventoryTemporaryExample example = new BsInventoryTemporaryExample();
			example.setOrderByClause(" create_time desc ");
			Criteria criteria = example.createCriteria();
			if (grainType > 0) {
				criteria.andGrainTypeEqualTo(grainType);
			}
			if (recordType > 0) {
				criteria.andRecordTypeEqualTo(recordType);
			}
			if (staffId > 0) {
				criteria.andStaffIdEqualTo(staffId);
			}
			if (StringUtils.isNotEmpty(staffName)) {
				criteria.andStaffNameLike("%" + staffName + "%");
			}
			if (StringUtils.isNotEmpty(recordNumber)) {
				criteria.andRecordNumberLike("%" + recordNumber + "%");
			}
			if (StringUtils.isNotEmpty(licensePlate)) {
				criteria.andLicensePlateLike("%" + licensePlate + "%");
			}
			if (driverId > 0) {
				criteria.andDriverIdEqualTo(driverId);
			}
			if (strTime != null && !"".equals(strTime) && endTime != null && !"".equals(endTime)) {
				Date stime = DateUtil.getDate(DateStyle.YYYY_MM_DD.getValue(), strTime);
				Date etime = DateUtil.getDate(DateStyle.YYYY_MM_DD.getValue(), endTime);
				criteria.andRecordTimeBetween(stime, etime);
			}
			if (isPay > -1) {
				criteria.andIfPaymentEqualTo(isPay);
			}
			if (depotId > 0) {
				criteria.andDepotIdEqualTo(depotId);
			}
			criteria.andUserIdEqualTo(ownerId);
			// 通过userId ,获取他的粮库ID列表
			List<Integer> depotIdList = bsInventoryDepotDao.getIdList(userId);
			if (depotIdList != null && depotIdList.size() > 0) {
				criteria.andDepotIdIn(depotIdList);
			} else {
				criteria.andDepotIdEqualTo(0);
			}
			// 翻页
			example.setLimit(pageSize);
			example.setOffset(offset);

			List<BsInventoryTemporary> list = mapper.selectByExample(example);

			int total = mapper.countByExample(example);
			jsonUtils.setTotal(total);

			if (list != null && list.size() > 0) {
				/*
				 * 车号 毛重 皮重 净重 单价 金额 平均成本 粮质
				 */
				Map<String, String> map = new HashMap<String, String>();
				map.put("number", "序号");
				map.put("id", "ID");
				map.put("type", "按查询");
				map.put("recordType", "单种类");
				map.put("recordNumber", "单号");
				map.put("date", "称重日期");
				map.put("time", "称重时间");
				map.put("timeUnit", "称重时间");
				map.put("netWeight", "净重（公斤）");
				map.put("averageCost", "平均成本（元/斤）");
				map.put("money", "金额（元）");
				map.put("profit", "利润（元）");
				map.put("grainType", "品种");
				map.put("licensePlate", "车号");
				map.put("grossWeight", "毛重（公斤）");
				map.put("tareWeight", "皮重（公斤）");
				map.put("unitPrice", "单价（元/斤）");
				map.put("deduction", "扣重（公斤）");

				if (recordType == RecordTypeEnum.入库.getCode()) {
					map.put("paidMoney", "已付款");
					map.put("unpaidMoney", "未付款");
				} else {
					map.put("paidMoney", "已收款");
					map.put("unpaidMoney", "未收款");
				}

				map.put("ifClear", "是否清零");

				// map.put("weifuk", "未付款（元）");
				map.put("quality", "粮质");
				map.put("remark", "备注");
				map.put("staffId", "人员编号");
				map.put("staffName", "人员姓名");
				map.put("driverName", "司机姓名");

				if (recordType == RecordTypeEnum.入库.getCode()) {
					jsonUtils.addTitle("number", "id", "type", "recordType", "recordNumber", "grainType", "date",
							"time", "licensePlate", "grossWeight", "tareWeight", "netWeight", "unitPrice", "money",
							"deduction", "paidMoney", "unpaidMoney", "ifClear", "averageCost", "quality", "remark",
							"staffId", "staffName", "driverName");
				} else {
					jsonUtils.addTitle("number", "id", "type", "recordType", "recordNumber", "grainType", "date",
							"time", "licensePlate", "grossWeight", "tareWeight", "netWeight", "unitPrice", "money",
							"deduction", "paidMoney", "unpaidMoney", "ifClear", "quality", "remark", "staffId",
							"staffName", "driverName");
				}

				jsonUtils.setTitleMap(map);
				jsonUtils.setSuccess(true);
				for (BsInventoryTemporary item : list) {
					String grainName = GrainTypeEnum.getName(grainType);
					String recordName = RecordTypeEnum.getName(recordType);

					String str1 = "";
					String str2 = "";
					String str3 = "";
					String str4 = "";
					// if (grainType == GrainTypeEnum.玉米.getCode()) {
					str1 = "水分：" + item.getMoistureContent();
					str2 = "霉变：" + item.getMildew();
					str3 = "容重：" + item.getBulkDensity();
					str4 = "不完善粒：" + item.getImperfectGrains();
					// }
					String quality = str1 + " " + str2 + " " + str3 + " " + str4;
					String remark = item.getRemark();
					String ifPayment = "";
					if (item.getIfPayment() != null) {
						if (item.getIfPayment() == 1) {
							ifPayment = "已付";
						} else {
							ifPayment = "未付";
						}
					}

					Double shifuk = item.getShifuk();

					if (recordType == RecordTypeEnum.入库.getCode()) {
						// excel 导出 不添加 逗号
						if (isExcel) {
							jsonUtils.addOneRow(number++, item.getId(), searchType, recordName, item.getRecordNumber(),
									grainName, dateReplace(item.getDate()), item.getTime(), item.getLicensePlate(),
									formatMoneyPercent(item.getGrossWeightIn()),
									formatMoneyPercent(item.getTareWeightIn()),
									formatMoneyPercent(item.getNetWeightIn()), formatToPercentP3(item.getUnitPrice()),
									formatMoneyPercent(item.getMoneyIn()), formatMoneyPercent(item.getDeduction()),
									formatMoneyPercent(item.getPaidMoney()), formatMoneyPercent(item.getUnpaidMoney()),
									item.getIfClear(), formatToPercentP3(item.getAveragePriceIn() / 2), quality,
									remark, item.getStaffId(), item.getStaffName(), item.getDriverName());
						} else {
							jsonUtils.addOneRow(number++, item.getId(), searchType, recordName, item.getRecordNumber(),
									grainName, dateReplace(item.getDate()), item.getTime(), item.getLicensePlate(),
									formatMoneyPercentCMA(item.getGrossWeightIn()),
									formatMoneyPercentCMA(item.getTareWeightIn()),
									formatMoneyPercentCMA(item.getNetWeightIn()),
									formatToPercentP3CMA(item.getUnitPrice()),
									formatMoneyPercentCMA(item.getMoneyIn()),

									formatToPercentP3CMA(item.getDeduction()),
									formatMoneyPercentCMA(item.getPaidMoney()),
									formatMoneyPercentCMA(item.getUnpaidMoney()), item.getIfClear(),
									formatToPercentP3CMA(item.getAveragePriceIn() / 2), quality, remark,
									item.getStaffId(), item.getStaffName(), item.getDriverName());
						}
					} else {
						// excel 导出 不添加 逗号
						if (isExcel) {
							jsonUtils.addOneRow(number++, item.getId(), searchType, recordName, item.getRecordNumber(),
									grainName, dateReplace(item.getDate()), item.getTime(), item.getLicensePlate(),
									formatMoneyPercent(item.getGrossWeightOut()),
									formatMoneyPercent(item.getTareWeightOut()),
									formatMoneyPercent(item.getNetWeightOut()), formatToPercentP3(item.getUnitPrice()),
									formatMoneyPercent(item.getMoneyOut()), formatMoneyPercent(item.getDeduction()),
									formatMoneyPercent(item.getPaidMoney()), formatMoneyPercent(item.getUnpaidMoney()),
									item.getIfClear(), quality, remark, item.getStaffId(), item.getStaffName(),
									item.getDriverName());
						} else {
							jsonUtils.addOneRow(number++, item.getId(), searchType, recordName, item.getRecordNumber(),
									grainName, dateReplace(item.getDate()), item.getTime(), item.getLicensePlate(),
									formatMoneyPercentCMA(item.getGrossWeightOut()),
									formatMoneyPercentCMA(item.getTareWeightOut()),
									formatMoneyPercentCMA(item.getNetWeightOut()),
									formatToPercentP3CMA(item.getUnitPrice()),
									formatMoneyPercentCMA(item.getMoneyOut()),
									formatMoneyPercentCMA(item.getDeduction()),
									formatMoneyPercentCMA(item.getPaidMoney()),
									formatMoneyPercentCMA(item.getUnpaidMoney()), item.getIfClear(), quality, remark,
									item.getStaffId(), item.getStaffName(), item.getDriverName());
						}
					}
				}
			}
		} else {
			// 添加 粮库查询
			String depotIds = bsInventoryDepotDao.getIds(userId);
			List<InventoryRecordBO> list = commonMapper.getSearchLists(depotIds, ownerId, grainType, recordType,
					searchType, offset, limit);
			int total = commonMapper.getSearchCounts(depotIds, ownerId, grainType, recordType, searchType);
			jsonUtils.setTotal(total);

			if (list != null && list.size() > 0) {
				Map<String, String> map = new HashMap<String, String>();
				// if (wxList == 1) {
				// if (recordType == RecordTypeEnum.入库.getCode()) {
				// jsonUtils.addTitle("type", "timeUnit", "money", "netWeight",
				// "averageCost");
				// } else {
				// jsonUtils.addTitle("type", "timeUnit", "money", "netWeight");
				// }
				// map.put("type", "品种");
				// map.put("timeUnit", "称重时间");
				// map.put("grossWeight", "毛重");
				// map.put("tareWeight", "皮重");
				// map.put("netWeight", "净重");
				// if (recordType == RecordTypeEnum.入库.getCode()) {
				// map.put("averageCost", "平均成本");
				// }
				// } else {

				jsonUtils.addTitle("number", "type", "recordType", "grainType", "timeUnit", "grossWeight",
						"tareWeight", "netWeight", "money", "unpaidMoney", "deduction");
				map.put("number", "序号");
				map.put("recordType", "单种类");
				map.put("grainType", "品种");
				map.put("timeUnit", "称重时间");
				map.put("grossWeight", "毛重（公斤）");
				map.put("tareWeight", "皮重（公斤）");
				map.put("netWeight", "净重（公斤）");
				map.put("money", "金额（元）");
				if (recordType == RecordTypeEnum.入库.getCode()) {
					map.put("unpaidMoney", "未付款（元）");
				} else {
					map.put("unpaidMoney", "未收款（元）");
				}
				map.put("deduction", "扣重（公斤）");

				// 入库的时候多平均成本
				// if (recordType == RecordTypeEnum.入库.getCode()) {
				// map.put("averageCost", "平均成本");
				// jsonUtils.addTitle("averageCost");
				// }
				// 出库时多 出库平均价格
				if (recordType == RecordTypeEnum.出库.getCode()) {
					map.put("averagePrice", "平均价格（元/斤）");
					jsonUtils.addTitle("averagePrice");
				}

				jsonUtils.setTitleMap(map);
				jsonUtils.setSuccess(true);

				for (InventoryRecordBO item : list) {
					String dateStr = StringUtils.trim(item.getDateStr());
					String unpaidMoney = "";
					if (searchType == 3) {
						int year = item.getYear();
						int weekIndex = NumberUtils.toInt(dateStr);
						String[] bEdate = TDateTimeUnits.getDayOfWeek(year, weekIndex);
						if (bEdate != null && bEdate.length == 2) {
							dateStr = dateReplace(bEdate[0]) + "~" + dateReplace(bEdate[1]);
						}
					} else if (searchType == 4) {
						int year = item.getYear();
						dateStr = year + "年" + dateStr + "月";
					}

					String grainName = GrainTypeEnum.getName(grainType);
					String recordName = RecordTypeEnum.getName(recordType);

					if (recordType == RecordTypeEnum.入库.getCode()) {

						// jsonUtils.addOneRow(number++, searchType, recordName,
						// grainName, dateStr,
						// formatMoneyPercent(item.getGrossInTotal()),
						// formatMoneyPercent(item.getTareInTotal()),
						// formatMoneyPercent(item.getNetInTotal()),
						// formatMoneyPercent(item.getMoneyInTotal()),
						// formatMoneyPercent(item.getAverageCost()));
						// excel 导出 不添加 逗号
						if (isExcel) {
							jsonUtils.addOneRow(number++, searchType, recordName, grainName, dateStr,
									formatMoneyPercent(item.getGrossInTotal()),
									formatMoneyPercent(item.getTareInTotal()),
									formatMoneyPercent(item.getNetInTotal()),
									formatMoneyPercent(item.getMoneyInTotal()),
									formatMoneyPercent(item.getUnpaidMoney()), formatMoneyPercent(item.getDeduction()));
						} else {
							jsonUtils.addOneRow(number++, searchType, recordName, grainName, dateStr,
									formatMoneyPercentCMA(item.getGrossInTotal()),
									formatMoneyPercentCMA(item.getTareInTotal()),
									formatMoneyPercentCMA(item.getNetInTotal()),
									formatMoneyPercentCMA(item.getMoneyInTotal()),
									formatMoneyPercentCMA(item.getUnpaidMoney()),
									formatMoneyPercentCMA(item.getDeduction()));
						}
						// }
					} else {
						// if (wxList == 1) {
						// jsonUtils.addOneRow(searchType, dateStr,
						// item.getMoneyInTotal(), item.getNetInTotal());
						// } else {
						if (isExcel) {
							jsonUtils.addOneRow(number++, searchType, recordName, grainName, dateStr,
									formatMoneyPercent(item.getGrossOutTotal()),
									formatMoneyPercent(item.getTareOutTotal()),
									formatMoneyPercent(item.getNetOutTotal()),
									formatMoneyPercent(item.getMoneyOutTotal()),
									formatMoneyPercent(item.getUnpaidMoney()), formatMoneyPercent(item.getDeduction()),
									formatToPercentP3(item.getAveragePrice()));// 出库平均价元/斤
						} else {
							jsonUtils.addOneRow(number++, searchType, recordName, grainName, dateStr,
									formatMoneyPercentCMA(item.getGrossOutTotal()),
									formatMoneyPercentCMA(item.getTareOutTotal()),
									formatMoneyPercentCMA(item.getNetOutTotal()),
									formatMoneyPercentCMA(item.getMoneyOutTotal()),
									formatToPercentP3CMA(item.getUnpaidMoney()),
									formatToPercentP3CMA(item.getDeduction()),
									formatToPercentP3CMA(item.getAveragePrice()));// 出库平均价元/斤
						}
						// }
					}
				}
			}
		}
		return jsonUtils;
	}

	public static String dateReplace(String date) {
		if (StringUtils.isEmpty(date)) {
			return "";
		}
		return date.replaceAll("-", "/");
	}

	public static final DecimalFormat dfP2 = new DecimalFormat("###0.00");
	public static final DecimalFormat dfP3 = new DecimalFormat("###0.000");

	public static final DecimalFormat dfP2CMA = new DecimalFormat("###,###,###,##0.00");
	public static final DecimalFormat dfP3CMA = new DecimalFormat("###,###,###,##0.000");

	public static String formatMoneyPercentCMA(Double doubleVal) {
		if (doubleVal == null) {
			return "";
		}
		return NumberFormatUtil.formatToPercent(dfP2CMA, doubleVal);
	}

	public static String formatToPercentP3CMA(Double doubleVal) {
		if (doubleVal == null) {
			return "";
		}
		return NumberFormatUtil.formatToPercent(dfP3CMA, doubleVal);
	}

	public static String formatMoneyPercent(Double doubleVal) {
		if (doubleVal == null) {
			return "";
		}
		return NumberFormatUtil.formatToPercent(dfP2, doubleVal);
	}

	public static String formatToPercentP3(Double doubleVal) {
		if (doubleVal == null) {
			return "";
		}
		return NumberFormatUtil.formatToPercent(dfP3, doubleVal);
	}

	@Override
	public int countByExample(BsInventoryTemporaryExample paramD) {
		return mapper.countByExample(paramD);
	}

	@Override
	public int deleteByExample(BsInventoryTemporaryExample paramD) {
		return mapper.deleteByExample(paramD);
	}

	@Override
	public int deleteByPrimaryKey(BsInventoryTemporaryKey paramK) {
		return mapper.deleteByPrimaryKey(paramK);
	}

	@Override
	public int insert(BsInventoryTemporary paramT) {
		return mapper.insert(paramT);
	}

	@Override
	public int insertSelective(BsInventoryTemporary paramT) {
		return mapper.insertSelective(paramT);
	}

	@Override
	public int batchInsert(List<BsInventoryTemporary> paramList) {
		for (BsInventoryTemporary BsInventoryTemporary : paramList) {
			mapper.insert(BsInventoryTemporary);
		}
		return paramList.size();
	}

	@Override
	public int batchUpdate(List<BsInventoryTemporary> paramList) {
		for (BsInventoryTemporary BsInventoryTemporary : paramList) {
			mapper.updateByPrimaryKeySelective(BsInventoryTemporary);
		}
		return paramList.size();
	}

	@Override
	public int batchDelete(List<BsInventoryTemporary> paramList) {
		for (BsInventoryTemporary BsInventoryTemporary : paramList) {
			mapper.deleteByPrimaryKey(BsInventoryTemporary);
		}
		return 0;
	}

	@Override
	public List<BsInventoryTemporary> selectByExample(BsInventoryTemporaryExample paramD) {
		return mapper.selectByExample(paramD);
	}

	@Override
	public BsInventoryTemporary selectByPrimaryKey(BsInventoryTemporaryKey paramK) {
		return mapper.selectByPrimaryKey(paramK);
	}

	@Override
	public List<BsInventoryTemporary> findAll(List<BsInventoryTemporary> records) {
		if (records == null || records.size() <= 0) {
			return mapper.selectByExample(new BsInventoryTemporaryExample());
		}
		List<BsInventoryTemporary> list = new ArrayList<>();
		for (BsInventoryTemporary record : records) {
			BsInventoryTemporary result = mapper.selectByPrimaryKey(record);
			if (result != null) {
				list.add(result);
			}
		}
		return list;
	}

	@Override
	public int updateByExampleSelective(BsInventoryTemporary paramT, BsInventoryTemporaryExample paramD) {
		return mapper.updateByExampleSelective(paramT, paramD);
	}

	@Override
	public int updateByExample(BsInventoryTemporary paramT, BsInventoryTemporaryExample paramD) {
		return mapper.updateByExample(paramT, paramD);
	}

	@Override
	public int updateByPrimaryKeySelective(BsInventoryTemporary paramT) {
		return mapper.updateByPrimaryKey(paramT);
	}

	@Override
	public int updateByPrimaryKey(BsInventoryTemporary paramT) {
		return mapper.updateByPrimaryKey(paramT);
	}

	@Override
	public int sumByExample(BsInventoryTemporaryExample paramD) {
		return 0;
	}

	@Override
	public void deleteAll() {
		mapper.deleteByExample(new BsInventoryTemporaryExample());
	}

	@Override
	public BsInventoryTemporaryExample getExample(BsInventoryTemporary record) {
		BsInventoryTemporaryExample example = new BsInventoryTemporaryExample();
		if (record != null) {
			Criteria criteria = example.createCriteria();
			if (record.getId() != null) {
				criteria.andIdEqualTo(record.getId());
			}
			if (record.getUserId() != null) {
				criteria.andUserIdEqualTo(record.getUserId());
			}
		}
		return example;
	}

}
